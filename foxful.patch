diff --git a/go.mod b/go.mod
index 419d380..955adbf 100644
--- a/go.mod
+++ b/go.mod
@@ -3,12 +3,13 @@ module github.com/go-musicfox/go-musicfox
 go 1.18
 
 require (
+	github.com/anhoder/foxful-cli v0.0.0-20230626142934-066334e0835b
 	github.com/bogem/id3v2/v2 v2.1.4
 	github.com/buger/jsonparser v1.1.1
 	github.com/charmbracelet/bubbles v0.16.1
 	github.com/charmbracelet/bubbletea v0.24.2
 	github.com/charmbracelet/lipgloss v0.7.1
-	github.com/ebitengine/purego v0.3.2
+	github.com/ebitengine/purego v0.4.0
 	github.com/faiface/beep v1.1.0
 	github.com/fhs/gompd/v2 v2.3.0
 	github.com/fogleman/ease v0.0.0-20170301025033-8da417bf1776
@@ -23,7 +24,7 @@ require (
 	github.com/lucasb-eyer/go-colorful v1.2.0
 	github.com/markthree/go-get-folder-size v0.3.4
 	github.com/mattn/go-runewidth v0.0.14
-	github.com/muesli/termenv v0.15.1
+	github.com/muesli/termenv v0.15.2
 	github.com/pkg/errors v0.9.1
 	github.com/shkh/lastfm-go v0.0.0-20191215035245-89a801c244e0
 	github.com/skip2/go-qrcode v0.0.0-20200617195104-da1b6568686e
@@ -76,6 +77,7 @@ require (
 )
 
 replace (
+	github.com/anhoder/foxful-cli => ../foxful-cli
 	github.com/charmbracelet/bubbletea v0.24.2 => github.com/go-musicfox/bubbletea v0.24.1
 	github.com/cnsilvan/UnblockNeteaseMusic v0.0.0-20230310083816-92b59c95a366 => github.com/go-musicfox/UnblockNeteaseMusic v0.1.2
 	github.com/cocoonlife/goflac v0.0.0-20170210142907-50ea06ed5a9d => github.com/go-musicfox/goflac v0.1.5
diff --git a/go.sum b/go.sum
index ceb6f8a..0ba2c4d 100644
--- a/go.sum
+++ b/go.sum
@@ -1,4 +1,6 @@
 github.com/DATA-DOG/go-sqlmock v1.3.3/go.mod h1:f/Ixk793poVmq4qj/V1dPUg2JEAKC73Q5eFN3EC/SaM=
+github.com/anhoder/foxful-cli v0.0.0-20230626142934-066334e0835b h1:rmKrZhKMsmUwfCmETI3GwIMCJ9PMECp/xYHCQJfzhIA=
+github.com/anhoder/foxful-cli v0.0.0-20230626142934-066334e0835b/go.mod h1:YdsXQrfCbxgqgnQdHZbJIHR4eStigOZfqQ8VqRJzDOQ=
 github.com/anhoder/gcli/v2 v2.3.5 h1:tiFK7xnZxNHIevEaRtfT4Cfhz4OYFcJaeB1S55dxxBU=
 github.com/anhoder/gcli/v2 v2.3.5/go.mod h1:AOxm27rFzNDLpBrwbW1pAh3ofebpXOQk/9x009qC9y8=
 github.com/atotto/clipboard v0.1.4 h1:EH0zSVneZPSuFR11BlR9YppQTVDbh5+16AmcJi4g1z4=
@@ -23,6 +25,8 @@ github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c
 github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/ebitengine/purego v0.3.2 h1:+pV+tskAkn/bxEcUzGtDfw2VAe3bRQ26kdzFjPPrCww=
 github.com/ebitengine/purego v0.3.2/go.mod h1:iIjxzd6CiRiOG0UyXP+V1+jWqUXVjPKLAI0mRfJZTmQ=
+github.com/ebitengine/purego v0.4.0 h1:RQVuMIxQPQ5iCGEJvjQ17YOK+1tMKjVau2FUMvXH4HE=
+github.com/ebitengine/purego v0.4.0/go.mod h1:ah1In8AOtksoNK6yk5z1HTJeUkC1Ez4Wk2idgGslMwQ=
 github.com/fhs/gompd/v2 v2.3.0 h1:wuruUjmOODRlJhrYx73rJnzS7vTSXSU7pWmZtM3VPE0=
 github.com/fhs/gompd/v2 v2.3.0/go.mod h1:nNdZtcpD5VpmzZbRl5rV6RhxeMmAWTxEsSIMBkmMIy4=
 github.com/fogleman/ease v0.0.0-20170301025033-8da417bf1776 h1:VRIbnDWRmAh5yBdz+J6yFMF5vso1It6vn+WmM/5l7MA=
@@ -131,8 +135,8 @@ github.com/muesli/cancelreader v0.2.2 h1:3I4Kt4BQjOR54NavqnDogx/MIoWBFa0StPA8ELU
 github.com/muesli/cancelreader v0.2.2/go.mod h1:3XuTXfFS2VjM+HTLZY9Ak0l6eUKfijIfMUZ4EgX0QYo=
 github.com/muesli/reflow v0.3.0 h1:IFsN6K9NfGtjeggFP+68I4chLZV2yIKsXJFNZ+eWh6s=
 github.com/muesli/reflow v0.3.0/go.mod h1:pbwTDkVPibjO2kyvBQRBxTWEEGDGq0FlB1BIKtnHY/8=
-github.com/muesli/termenv v0.15.1 h1:UzuTb/+hhlBugQz28rpzey4ZuKcZ03MeKsoG7IJZIxs=
-github.com/muesli/termenv v0.15.1/go.mod h1:HeAQPTzpfs016yGtA4g00CsdYnVLJvxsS4ANqrZs2sQ=
+github.com/muesli/termenv v0.15.2 h1:GohcuySI0QmI3wN8Ok9PtKGkgkFIk7y6Vpb5PvrY+Wo=
+github.com/muesli/termenv v0.15.2/go.mod h1:Epx+iuz8sNs7mNKhxzH4fWXGNpZwUaJKRS1noLXviQ8=
 github.com/panjf2000/ants/v2 v2.8.0 h1:4p4gPabD6iNM9Y5NpMc0g0L15uXDmfn6jkW5KP+oiHQ=
 github.com/panjf2000/ants/v2 v2.8.0/go.mod h1:KIBmYG9QQX5U2qzFP/yQJaq/nSb6rahS9iEHkrCMgM8=
 github.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
diff --git a/pkg/commands/config.go b/pkg/commands/config.go
index a3d7c29..39add98 100644
--- a/pkg/commands/config.go
+++ b/pkg/commands/config.go
@@ -17,7 +17,7 @@ func NewConfigCommand() *gcli.Command {
 		UseFor: "Print configuration file to be loaded",
 		Func: func(_ *gcli.Command, _ []string) error {
 			var configPath = ui.SetFgStyle(path.Join(utils.GetLocalDataDir(), constants.AppIniFile), termenv.ANSICyan)
-			fmt.Printf("\nLoaded Configuration File: %s\n", configPath)
+			fmt.Printf("Loaded Configuration File:\n\t%s\n", configPath)
 			return nil
 		},
 	}
diff --git a/pkg/commands/netease.go b/pkg/commands/netease.go
index 08b30ae..100b1e5 100644
--- a/pkg/commands/netease.go
+++ b/pkg/commands/netease.go
@@ -5,12 +5,13 @@ import (
 	_ "net/http/pprof"
 	"strconv"
 
+	"github.com/anhoder/foxful-cli/model"
 	"github.com/go-musicfox/go-musicfox/pkg/configs"
 	"github.com/go-musicfox/go-musicfox/pkg/constants"
 	"github.com/go-musicfox/go-musicfox/pkg/ui"
 	"github.com/go-musicfox/go-musicfox/utils"
+	"github.com/mattn/go-runewidth"
 
-	tea "github.com/charmbracelet/bubbletea"
 	"github.com/gookit/gcli/v2"
 )
 
@@ -31,18 +32,13 @@ func runPlayer(_ *gcli.Command, _ []string) error {
 	}
 
 	http.DefaultClient.Timeout = constants.AppHttpTimeout
-	neteaseModel := ui.NewNeteaseModel(configs.ConfigRegistry.StartupLoadingDuration)
+	runewidth.DefaultCondition.EastAsianWidth = false
 
-	var opts []tea.ProgramOption
-	if configs.ConfigRegistry.MainEnableMouseEvent {
-		opts = append(opts, tea.WithMouseCellMotion())
-	}
-	if configs.ConfigRegistry.MainAltScreen {
-		opts = append(opts, tea.WithAltScreen())
-	}
-	program := tea.ReplaceWithFoxfulRenderer(tea.NewProgram(neteaseModel, opts...))
-	neteaseModel.BindProgram(program)
+	var opts = model.DefaultOptions()
+	configs.ConfigRegistry.FillToModelOpts(opts)
+
+	var netease = ui.NewNetease(model.NewApp(opts))
+	netease.WithHook(netease.InitHook, netease.CloseHook)
 
-	_, err := program.Run()
-	return err
+	return netease.Run()
 }
diff --git a/pkg/configs/registry.go b/pkg/configs/registry.go
index 9df153e..dcb3859 100644
--- a/pkg/configs/registry.go
+++ b/pkg/configs/registry.go
@@ -5,6 +5,8 @@ import (
 	"strings"
 	"time"
 
+	"github.com/anhoder/foxful-cli/model"
+	tea "github.com/charmbracelet/bubbletea"
 	"github.com/go-musicfox/go-musicfox/pkg/constants"
 
 	"github.com/go-musicfox/netease-music/service"
@@ -66,6 +68,36 @@ type Registry struct {
 	PlayerMpdAddr        string // mpd地址
 }
 
+func (r *Registry) FillToModelOpts(opts *model.Options) {
+	opts.StartupOptions.EnableStartup = r.StartupShow
+	opts.StartupOptions.LoadingDuration = r.StartupLoadingDuration
+	opts.StartupOptions.TickDuration = constants.StartupTickDuration
+	opts.StartupOptions.ProgressOutBounce = r.StartupProgressOutBounce
+	opts.StartupOptions.Welcome = r.StartupWelcome
+
+	opts.ProgressOptions.FirstFullChar = r.ProgressFirstFullChar
+	opts.ProgressOptions.FullChar = r.ProgressFullChar
+	opts.ProgressOptions.LastFullChar = r.ProgressLastFullChar
+	opts.ProgressOptions.FirstEmptyChar = r.ProgressFirstEmptyChar
+	opts.ProgressOptions.EmptyChar = r.ProgressEmptyChar
+	opts.ProgressOptions.LastEmptyChar = r.ProgressLastEmptyChar
+
+	opts.AppName = constants.AppName
+	opts.WhetherDisplayTitle = r.MainShowTitle
+	opts.LoadingText = r.MainLoadingText
+	opts.PrimaryColor = r.MainPrimaryColor
+	opts.DualColumn = r.MainDoubleColumn
+
+	if r.MainEnableMouseEvent {
+		opts.TeaOptions = append(opts.TeaOptions, tea.WithMouseCellMotion())
+	}
+	if r.MainAltScreen {
+		opts.TeaOptions = append(opts.TeaOptions, tea.WithAltScreen())
+	}
+
+	opts.InitMenuTitle = &model.MenuItem{Title: "网易云音乐"}
+}
+
 func NewRegistryWithDefault() *Registry {
 	registry := &Registry{
 		StartupShow:              true,
diff --git a/pkg/entry/cli.go b/pkg/entry/cli.go
index 8d34f2e..4dee706 100644
--- a/pkg/entry/cli.go
+++ b/pkg/entry/cli.go
@@ -4,10 +4,10 @@ import (
 	"fmt"
 	"log"
 
+	"github.com/anhoder/foxful-cli/util"
 	"github.com/go-musicfox/go-musicfox/pkg/commands"
 	"github.com/go-musicfox/go-musicfox/pkg/configs"
 	"github.com/go-musicfox/go-musicfox/pkg/constants"
-	"github.com/go-musicfox/go-musicfox/pkg/ui"
 	"github.com/go-musicfox/go-musicfox/utils"
 
 	neteaseutil "github.com/go-musicfox/netease-music/util"
@@ -17,7 +17,7 @@ import (
 func runCLI() {
 	log.SetOutput(utils.LogWriter())
 
-	app := gcli.NewApp()
+	var app = gcli.NewApp()
 	app.Name = constants.AppName
 	app.Version = constants.AppVersion
 	app.Description = constants.AppDescription
@@ -28,9 +28,12 @@ func runCLI() {
 	// 加载config
 	utils.LoadIniConfig()
 
-	logo := utils.GetAlphaAscii(app.Name)
-	randomColor := ui.GetPrimaryColor()
-	logoColorful := ui.SetFgStyle(logo, randomColor)
+	util.PrimaryColor = configs.ConfigRegistry.MainPrimaryColor
+	var (
+		logo         = util.GetAlphaAscii(app.Name)
+		randomColor  = util.GetPrimaryColor()
+		logoColorful = util.SetFgStyle(logo, randomColor)
+	)
 
 	gcli.AppHelpTemplate = fmt.Sprintf(constants.AppHelpTemplate, logoColorful)
 	app.Logo.Text = logoColorful
@@ -42,7 +45,7 @@ func runCLI() {
 	neteaseutil.EnableLocalVip = configs.ConfigRegistry.UNMEnableLocalVip
 	neteaseutil.UnlockSoundEffects = configs.ConfigRegistry.UNMUnlockSoundEffects
 
-	playerCommand := commands.NewPlayerCommand()
+	var playerCommand = commands.NewPlayerCommand()
 	app.Add(playerCommand)
 	app.Add(commands.NewConfigCommand())
 	app.DefaultCommand(playerCommand.Name)
diff --git a/pkg/ui/cur_playlist.go b/pkg/ui/cur_playlist.go
index 4612548..18924d5 100644
--- a/pkg/ui/cur_playlist.go
+++ b/pkg/ui/cur_playlist.go
@@ -1,6 +1,7 @@
 package ui
 
 import (
+	"github.com/anhoder/foxful-cli/model"
 	"github.com/go-musicfox/go-musicfox/pkg/structs"
 )
 
@@ -39,8 +40,8 @@ func (m *CurPlaylist) Songs() []structs.Song {
 	return m.songs
 }
 
-func (m *CurPlaylist) BottomOutHook() Hook {
-	return func(model *NeteaseModel) bool {
+func (m *CurPlaylist) BottomOutHook() model.Hook {
+	return func(model *Netease) bool {
 		if model.player.playingMenu == nil || model.player.playingMenu.GetMenuKey() == CurPlaylistKey {
 			return true
 		}
diff --git a/pkg/ui/lastfm.go b/pkg/ui/lastfm.go
index 05c77d5..31894b5 100644
--- a/pkg/ui/lastfm.go
+++ b/pkg/ui/lastfm.go
@@ -10,11 +10,11 @@ import (
 
 type Lastfm struct {
 	DefaultMenu
-	model *NeteaseModel
+	model *Netease
 	auth  *LastfmAuth
 }
 
-func NewLastfm(model *NeteaseModel) *Lastfm {
+func NewLastfm(model *Netease) *Lastfm {
 	return &Lastfm{
 		model: model,
 		auth:  NewLastfmAuth(model),
@@ -37,7 +37,7 @@ func (m *Lastfm) MenuViews() []MenuItem {
 	}
 }
 
-func (m *Lastfm) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *Lastfm) SubMenu(_ *Netease, index int) Menu {
 	if m.model.lastfmUser == nil || m.model.lastfmUser.SessionKey == "" {
 		return m.auth
 	}
diff --git a/pkg/ui/lastfm_auth.go b/pkg/ui/lastfm_auth.go
index 574db7e..faf3995 100644
--- a/pkg/ui/lastfm_auth.go
+++ b/pkg/ui/lastfm_auth.go
@@ -9,13 +9,13 @@ import (
 
 type LastfmAuth struct {
 	DefaultMenu
-	model *NeteaseModel
+	model *Netease
 	token string
 	url   string
 	err   error
 }
 
-func NewLastfmAuth(model *NeteaseModel) *LastfmAuth {
+func NewLastfmAuth(model *Netease) *LastfmAuth {
 	return &LastfmAuth{model: model}
 }
 
@@ -30,14 +30,14 @@ func (m *LastfmAuth) MenuViews() []MenuItem {
 }
 
 func (m *LastfmAuth) BeforeBackMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		m.token, m.url, m.err = "", "", nil
 		return true
 	}
 }
 
 func (m *LastfmAuth) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		m.token, m.url, m.err = model.lastfm.GetAuthUrlWithToken()
 		if m.url != "" {
 			_ = open.Start(m.url)
@@ -47,7 +47,7 @@ func (m *LastfmAuth) BeforeEnterMenuHook() Hook {
 	}
 }
 
-func (m *LastfmAuth) SubMenu(model *NeteaseModel, _ int) Menu {
+func (m *LastfmAuth) SubMenu(model *Netease, _ int) Menu {
 	var err error
 
 	loading := NewLoading(model)
diff --git a/pkg/ui/lastfm_res.go b/pkg/ui/lastfm_res.go
index e3ff6c3..2d67986 100644
--- a/pkg/ui/lastfm_res.go
+++ b/pkg/ui/lastfm_res.go
@@ -27,7 +27,7 @@ func (m *LastfmRes) MenuViews() []MenuItem {
 	}
 }
 
-func (m *LastfmRes) SubMenu(model *NeteaseModel, _ int) Menu {
+func (m *LastfmRes) SubMenu(model *Netease, _ int) Menu {
 	level := m.backLevel // 避免后续被更新
 	for i := 0; i < level; i++ {
 		backMenu(model)
@@ -36,7 +36,7 @@ func (m *LastfmRes) SubMenu(model *NeteaseModel, _ int) Menu {
 }
 
 func (m *LastfmRes) BeforeBackMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		m.opName, m.err, m.backLevel = "", nil, 0
 		return true
 	}
diff --git a/pkg/ui/loading.go b/pkg/ui/loading.go
index 2d33027..0146e29 100644
--- a/pkg/ui/loading.go
+++ b/pkg/ui/loading.go
@@ -9,10 +9,10 @@ import (
 )
 
 type Loading struct {
-	model *NeteaseModel
+	model *Netease
 }
 
-func NewLoading(m *NeteaseModel) *Loading {
+func NewLoading(m *Netease) *Loading {
 	return &Loading{
 		model: m,
 	}
diff --git a/pkg/ui/login.go b/pkg/ui/login.go
index 3a0ab3f..77b0297 100644
--- a/pkg/ui/login.go
+++ b/pkg/ui/login.go
@@ -33,7 +33,7 @@ type LoginModel struct {
 	qrLoginStep   int
 	qrLoginUniKey string
 	tips          string
-	AfterLogin    func(m *NeteaseModel, newMenu Menu, newTitle *MenuItem)
+	AfterLogin    func(m *Netease, newMenu Menu, newTitle *MenuItem)
 }
 
 func NewLogin() (login *LoginModel) {
@@ -59,7 +59,7 @@ func NewLogin() (login *LoginModel) {
 }
 
 // update main ui
-func updateLogin(msg tea.Msg, m *NeteaseModel) (tea.Model, tea.Cmd) {
+func updateLogin(msg tea.Msg, m *Netease) (tea.Model, tea.Cmd) {
 	inputs := []textinput.Model{
 		m.loginModel.accountInput,
 		m.loginModel.passwordInput,
@@ -251,7 +251,7 @@ func updateLogin(msg tea.Msg, m *NeteaseModel) (tea.Model, tea.Cmd) {
 	return updateLoginInputs(msg, m)
 }
 
-func updateLoginInputs(msg tea.Msg, m *NeteaseModel) (tea.Model, tea.Cmd) {
+func updateLoginInputs(msg tea.Msg, m *Netease) (tea.Model, tea.Cmd) {
 	var (
 		cmd  tea.Cmd
 		cmds []tea.Cmd
@@ -266,7 +266,7 @@ func updateLoginInputs(msg tea.Msg, m *NeteaseModel) (tea.Model, tea.Cmd) {
 	return m, tea.Batch(cmds...)
 }
 
-func loginView(m *NeteaseModel) string {
+func loginView(m *Netease) string {
 	var builder strings.Builder
 
 	// 距离顶部的行数
@@ -355,7 +355,7 @@ func (m *LoginModel) qrButtonTextByStep() string {
 	}
 }
 
-func (m *LoginModel) loginSuccessHandle(nm *NeteaseModel, userInfo []byte) {
+func (m *LoginModel) loginSuccessHandle(nm *Netease, userInfo []byte) {
 	if user, err := structs.NewUserFromJson(userInfo); err == nil {
 		nm.user = &user
 
@@ -385,7 +385,7 @@ func (m *LoginModel) loginSuccessHandle(nm *NeteaseModel, userInfo []byte) {
 }
 
 // NeedLoginHandle 需要登录的处理
-func NeedLoginHandle(model *NeteaseModel, callback func(m *NeteaseModel, newMenu Menu, newTitle *MenuItem)) {
+func NeedLoginHandle(model *Netease, callback func(m *Netease, newMenu Menu, newTitle *MenuItem)) {
 	model.pageType = PtLogin
 	model.loginModel.AfterLogin = callback
 }
diff --git a/pkg/ui/main_ui.go b/pkg/ui/main_ui.go
index 38782a8..f2c0dba 100644
--- a/pkg/ui/main_ui.go
+++ b/pkg/ui/main_ui.go
@@ -90,7 +90,7 @@ func (main *MainUIModel) Close() {
 	main.player.Close()
 }
 
-func NewMainUIModel(parentModel *NeteaseModel) (m *MainUIModel) {
+func NewMainUIModel(parentModel *Netease) (m *MainUIModel) {
 	m = new(MainUIModel)
 
 	m.menuTitle = &MenuItem{Title: "网易云音乐"}
@@ -120,7 +120,7 @@ func (main *MainUIModel) refreshMenuTitle() {
 }
 
 // update main ui
-func (main *MainUIModel) update(message tea.Msg, m *NeteaseModel) (tea.Model, tea.Cmd) {
+func (main *MainUIModel) update(message tea.Msg, m *Netease) (tea.Model, tea.Cmd) {
 	switch msg := message.(type) {
 	case tea.KeyMsg:
 		return main.keyMsgHandle(msg, m)
@@ -184,7 +184,7 @@ func (main *MainUIModel) update(message tea.Msg, m *NeteaseModel) (tea.Model, te
 }
 
 // get main ui view
-func (main *MainUIModel) view(m *NeteaseModel) string {
+func (main *MainUIModel) view(m *Netease) string {
 	if m.WindowWidth <= 0 || m.WindowHeight <= 0 {
 		return ""
 	}
@@ -221,7 +221,7 @@ func (main *MainUIModel) view(m *NeteaseModel) string {
 }
 
 // title view
-func (main *MainUIModel) titleView(m *NeteaseModel, top *int) string {
+func (main *MainUIModel) titleView(m *Netease, top *int) string {
 	var titleBuilder strings.Builder
 	titleLen := utf8.RuneCountInString(constants.AppName) + 2
 	prefixLen := (m.WindowWidth - titleLen) / 2
@@ -242,7 +242,7 @@ func (main *MainUIModel) titleView(m *NeteaseModel, top *int) string {
 }
 
 // menu title
-func (main *MainUIModel) menuTitleView(m *NeteaseModel, top *int, menuTitle *MenuItem) string {
+func (main *MainUIModel) menuTitleView(m *Netease, top *int, menuTitle *MenuItem) string {
 	var (
 		menuTitleBuilder strings.Builder
 		title            string
@@ -288,7 +288,7 @@ func (main *MainUIModel) menuTitleView(m *NeteaseModel, top *int, menuTitle *Men
 }
 
 // 菜单列表
-func (main *MainUIModel) menuListView(m *NeteaseModel, top *int) string {
+func (main *MainUIModel) menuListView(m *Netease, top *int) string {
 	var menuListBuilder strings.Builder
 	menus := main.getCurPageMenus(m)
 	var lines, maxLines int
@@ -325,7 +325,7 @@ func (main *MainUIModel) menuListView(m *NeteaseModel, top *int) string {
 }
 
 // 菜单Line
-func (main *MainUIModel) menuLineView(m *NeteaseModel, line int) string {
+func (main *MainUIModel) menuLineView(m *Netease, line int) string {
 	var menuLineBuilder strings.Builder
 	var index int
 	if m.doubleColumn {
@@ -360,7 +360,7 @@ func (main *MainUIModel) menuLineView(m *NeteaseModel, line int) string {
 }
 
 // 菜单Item
-func (main *MainUIModel) menuItemView(m *NeteaseModel, index int) (string, int) {
+func (main *MainUIModel) menuItemView(m *Netease, index int) (string, int) {
 	var (
 		menuItemBuilder strings.Builder
 		menuTitle       string
@@ -435,7 +435,7 @@ func (main *MainUIModel) menuItemView(m *NeteaseModel, index int) (string, int)
 }
 
 // 菜单搜索
-func (main *MainUIModel) searchInputView(m *NeteaseModel, top *int) string {
+func (main *MainUIModel) searchInputView(m *Netease, top *int) string {
 	if !main.inSearching {
 		*top++
 		return "\n"
@@ -481,7 +481,7 @@ func (main *MainUIModel) searchInputView(m *NeteaseModel, top *int) string {
 }
 
 // 获取当前页的菜单
-func (main *MainUIModel) getCurPageMenus(m *NeteaseModel) []MenuItem {
+func (main *MainUIModel) getCurPageMenus(m *Netease) []MenuItem {
 	start := (m.menuCurPage - 1) * m.menuPageSize
 	end := int(math.Min(float64(len(m.menuList)), float64(m.menuCurPage*m.menuPageSize)))
 
@@ -489,7 +489,7 @@ func (main *MainUIModel) getCurPageMenus(m *NeteaseModel) []MenuItem {
 }
 
 // key handle
-func (main *MainUIModel) keyMsgHandle(msg tea.KeyMsg, m *NeteaseModel) (tea.Model, tea.Cmd) {
+func (main *MainUIModel) keyMsgHandle(msg tea.KeyMsg, m *Netease) (tea.Model, tea.Cmd) {
 	if !m.isListeningKey {
 		return m, nil
 	}
@@ -658,7 +658,7 @@ func (main *MainUIModel) keyMsgHandle(msg tea.KeyMsg, m *NeteaseModel) (tea.Mode
 }
 
 // mouse handle
-func (main *MainUIModel) mouseMsgHandle(msg tea.MouseMsg, m *NeteaseModel) (tea.Model, tea.Cmd) {
+func (main *MainUIModel) mouseMsgHandle(msg tea.MouseMsg, m *Netease) (tea.Model, tea.Cmd) {
 	if !m.isListeningKey {
 		return m, nil
 	}
diff --git a/pkg/ui/menu.go b/pkg/ui/menu.go
index 4830e02..599c3e3 100644
--- a/pkg/ui/menu.go
+++ b/pkg/ui/menu.go
@@ -1,55 +1,22 @@
 package ui
 
-import "github.com/go-musicfox/go-musicfox/pkg/structs"
-
-type Hook func(m *NeteaseModel) bool
+import (
+	"github.com/anhoder/foxful-cli/model"
+	"github.com/go-musicfox/go-musicfox/pkg/structs"
+)
 
 // Menu menu interface
 type Menu interface {
+	model.Menu
+
 	// IsPlayable 当前菜单是否可播放？
 	IsPlayable() bool
 
-	// IsSearchable 当前菜单是否可搜索
-	IsSearchable() bool
-
 	// IsLocatable 当前菜单是否支持播放自动定位
 	IsLocatable() bool
 
-	// RealDataIndex 索引转换
-	RealDataIndex(index int) int
-
 	// ResetPlaylistWhenPlay 空格播放时，是否重置播放列表？
 	ResetPlaylistWhenPlay() bool
-
-	// GetMenuKey 菜单唯一Key
-	GetMenuKey() string
-
-	// MenuViews 获取子菜单View
-	MenuViews() []MenuItem
-
-	// FormatMenuItem 进入前的格式化
-	FormatMenuItem(item *MenuItem)
-
-	// SubMenu 根据下标获取菜单Model
-	SubMenu(model *NeteaseModel, index int) Menu
-
-	// BeforePrePageHook 切换上一页前的Hook
-	BeforePrePageHook() Hook
-
-	// BeforeNextPageHook 切换下一页前的Hook
-	BeforeNextPageHook() Hook
-
-	// BeforeEnterMenuHook 进入菜单项前的Hook
-	BeforeEnterMenuHook() Hook
-
-	// BeforeBackMenuHook 菜单返回前的Hook
-	BeforeBackMenuHook() Hook
-
-	// BottomOutHook 触底的Hook
-	BottomOutHook() Hook
-
-	// TopOutHook 触顶Hook
-	TopOutHook() Hook
 }
 
 // DjMenu dj menu interface
@@ -74,63 +41,17 @@ type ArtistsMenu interface {
 }
 
 type DefaultMenu struct {
+	model.DefaultMenu
 }
 
 func (e *DefaultMenu) IsPlayable() bool {
 	return false
 }
 
-func (e *DefaultMenu) IsSearchable() bool {
-	return false
-}
-
 func (e *DefaultMenu) IsLocatable() bool {
 	return true
 }
 
-func (e *DefaultMenu) RealDataIndex(index int) int {
-	return index
-}
-
 func (e *DefaultMenu) ResetPlaylistWhenPlay() bool {
 	return false
 }
-
-func (e *DefaultMenu) GetMenuKey() string {
-	panic("implement me")
-}
-
-func (e *DefaultMenu) MenuViews() []MenuItem {
-	return nil
-}
-
-func (e *DefaultMenu) FormatMenuItem(_ *MenuItem) {
-}
-
-func (e *DefaultMenu) SubMenu(_ *NeteaseModel, _ int) Menu {
-	return nil
-}
-
-func (e *DefaultMenu) BeforePrePageHook() Hook {
-	return nil
-}
-
-func (e *DefaultMenu) BeforeNextPageHook() Hook {
-	return nil
-}
-
-func (e *DefaultMenu) BeforeEnterMenuHook() Hook {
-	return nil
-}
-
-func (e *DefaultMenu) BeforeBackMenuHook() Hook {
-	return nil
-}
-
-func (e *DefaultMenu) BottomOutHook() Hook {
-	return nil
-}
-
-func (e *DefaultMenu) TopOutHook() Hook {
-	return nil
-}
diff --git a/pkg/ui/menu_add_to_user_playlist.go b/pkg/ui/menu_add_to_user_playlist.go
index 82534c9..f4d9dda 100644
--- a/pkg/ui/menu_add_to_user_playlist.go
+++ b/pkg/ui/menu_add_to_user_playlist.go
@@ -49,12 +49,12 @@ func (m *AddToUserPlaylistMenu) Playlists() []structs.Playlist {
 	return m.playlists
 }
 
-func (m *AddToUserPlaylistMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *AddToUserPlaylistMenu) SubMenu(_ *Netease, index int) Menu {
 	return nil
 }
 
 func (m *AddToUserPlaylistMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		// 等于0，获取当前用户歌单
 		if m.userId == CurUser && utils.CheckUserInfo(model.user) == utils.NeedLogin {
 			NeedLoginHandle(model, enterMenu)
@@ -101,7 +101,7 @@ func (m *AddToUserPlaylistMenu) BottomOutHook() Hook {
 	if !m.hasMore {
 		return nil
 	}
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		userId := m.userId
 		if m.userId == CurUser {
 			// 等于0，获取当前用户歌单
diff --git a/pkg/ui/menu_album_detail.go b/pkg/ui/menu_album_detail.go
index b7b72d6..b43c682 100644
--- a/pkg/ui/menu_album_detail.go
+++ b/pkg/ui/menu_album_detail.go
@@ -40,7 +40,7 @@ func (m *AlbumDetailMenu) MenuViews() []MenuItem {
 }
 
 func (m *AlbumDetailMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 
 		albumService := service.AlbumService{
 			ID: strconv.FormatInt(m.albumId, 10),
diff --git a/pkg/ui/menu_album_list.go b/pkg/ui/menu_album_list.go
index 585b4d5..ba7487b 100644
--- a/pkg/ui/menu_album_list.go
+++ b/pkg/ui/menu_album_list.go
@@ -30,7 +30,7 @@ func (m *AlbumListMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *AlbumListMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *AlbumListMenu) SubMenu(_ *Netease, index int) Menu {
 	if index >= len(m.menuList) {
 		return nil
 	}
diff --git a/pkg/ui/menu_album_new.go b/pkg/ui/menu_album_new.go
index 8a49038..898bfc2 100644
--- a/pkg/ui/menu_album_new.go
+++ b/pkg/ui/menu_album_new.go
@@ -43,7 +43,7 @@ func (m *AlbumNewMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *AlbumNewMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *AlbumNewMenu) SubMenu(_ *Netease, index int) Menu {
 	if len(m.albums) < index {
 		return nil
 	}
@@ -52,7 +52,7 @@ func (m *AlbumNewMenu) SubMenu(_ *NeteaseModel, index int) Menu {
 }
 
 func (m *AlbumNewMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 
 		if len(m.menus) > 0 && len(m.albums) > 0 {
 			return true
@@ -93,7 +93,7 @@ func (m *AlbumNewMenu) BottomOutHook() Hook {
 	if m.total != -1 && m.offset < m.total {
 		return nil
 	}
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		m.offset = m.offset + len(m.menus)
 		newAlbumService := service.AlbumNewService{
 			Area:   m.area,
diff --git a/pkg/ui/menu_album_new_area.go b/pkg/ui/menu_album_new_area.go
index eec7c70..50226ac 100644
--- a/pkg/ui/menu_album_new_area.go
+++ b/pkg/ui/menu_album_new_area.go
@@ -26,7 +26,7 @@ func (m *AlbumNewAreaMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *AlbumNewAreaMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *AlbumNewAreaMenu) SubMenu(_ *Netease, index int) Menu {
 	areaValueMapping := []string{
 		"ALL",
 		"ZH",
diff --git a/pkg/ui/menu_album_newest.go b/pkg/ui/menu_album_newest.go
index 995884f..f4a73e8 100644
--- a/pkg/ui/menu_album_newest.go
+++ b/pkg/ui/menu_album_newest.go
@@ -32,7 +32,7 @@ func (m *AlbumNewestMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *AlbumNewestMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *AlbumNewestMenu) SubMenu(_ *Netease, index int) Menu {
 	if len(m.albums) < index {
 		return nil
 	}
@@ -41,7 +41,7 @@ func (m *AlbumNewestMenu) SubMenu(_ *NeteaseModel, index int) Menu {
 }
 
 func (m *AlbumNewestMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 
 		if len(m.menus) > 0 && len(m.albums) > 0 {
 			return true
diff --git a/pkg/ui/menu_album_top.go b/pkg/ui/menu_album_top.go
index 2971b81..e1ec9a7 100644
--- a/pkg/ui/menu_album_top.go
+++ b/pkg/ui/menu_album_top.go
@@ -42,7 +42,7 @@ func (m *AlbumTopMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *AlbumTopMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *AlbumTopMenu) SubMenu(_ *Netease, index int) Menu {
 	if len(m.albums) < index {
 		return nil
 	}
@@ -51,7 +51,7 @@ func (m *AlbumTopMenu) SubMenu(_ *NeteaseModel, index int) Menu {
 }
 
 func (m *AlbumTopMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 
 		if len(m.menus) > 0 && len(m.albums) > 0 {
 			return true
@@ -92,7 +92,7 @@ func (m *AlbumTopMenu) BottomOutHook() Hook {
 	if !m.hasMore {
 		return nil
 	}
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		m.offset = m.offset + len(m.menus)
 		topAlbumService := service.TopAlbumService{
 			Area:   m.area,
diff --git a/pkg/ui/menu_album_top_area.go b/pkg/ui/menu_album_top_area.go
index 8eedf12..d728575 100644
--- a/pkg/ui/menu_album_top_area.go
+++ b/pkg/ui/menu_album_top_area.go
@@ -26,7 +26,7 @@ func (m *AlbumTopAreaMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *AlbumTopAreaMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *AlbumTopAreaMenu) SubMenu(_ *Netease, index int) Menu {
 	areaValueMapping := []string{
 		"ALL",
 		"ZH",
diff --git a/pkg/ui/menu_artist_album.go b/pkg/ui/menu_artist_album.go
index 4b3003e..44e2b2f 100644
--- a/pkg/ui/menu_artist_album.go
+++ b/pkg/ui/menu_artist_album.go
@@ -35,7 +35,7 @@ func (m *ArtistAlbumMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *ArtistAlbumMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *ArtistAlbumMenu) SubMenu(_ *Netease, index int) Menu {
 	if len(m.albums) < index {
 		return nil
 	}
@@ -44,7 +44,7 @@ func (m *ArtistAlbumMenu) SubMenu(_ *NeteaseModel, index int) Menu {
 }
 
 func (m *ArtistAlbumMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 
 		artistAlbumService := service.ArtistAlbumService{
 			ID:     strconv.FormatInt(m.artistId, 10),
diff --git a/pkg/ui/menu_artist_detail.go b/pkg/ui/menu_artist_detail.go
index 59bb8fd..cf57a2a 100644
--- a/pkg/ui/menu_artist_detail.go
+++ b/pkg/ui/menu_artist_detail.go
@@ -27,7 +27,7 @@ func (m *ArtistDetailMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *ArtistDetailMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *ArtistDetailMenu) SubMenu(_ *Netease, index int) Menu {
 	switch index {
 	case 0:
 		return NewArtistSongMenu(m.artistId)
diff --git a/pkg/ui/menu_artist_list.go b/pkg/ui/menu_artist_list.go
index 6da0691..d8b653a 100644
--- a/pkg/ui/menu_artist_list.go
+++ b/pkg/ui/menu_artist_list.go
@@ -34,7 +34,7 @@ func (m *ArtistsOfSongMenu) Artists() []structs.Artist {
 	return m.song.Artists
 }
 
-func (m *ArtistsOfSongMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *ArtistsOfSongMenu) SubMenu(_ *Netease, index int) Menu {
 	if index >= len(m.menuList) {
 		return nil
 	}
diff --git a/pkg/ui/menu_artist_song.go b/pkg/ui/menu_artist_song.go
index a91b026..e8cd999 100644
--- a/pkg/ui/menu_artist_song.go
+++ b/pkg/ui/menu_artist_song.go
@@ -40,7 +40,7 @@ func (m *ArtistSongMenu) MenuViews() []MenuItem {
 }
 
 func (m *ArtistSongMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 
 		artistSongService := service.ArtistTopSongService{Id: strconv.FormatInt(m.artistId, 10)}
 		code, response := artistSongService.ArtistTopSong()
diff --git a/pkg/ui/menu_check_update.go b/pkg/ui/menu_check_update.go
index 95e7507..7e31d86 100644
--- a/pkg/ui/menu_check_update.go
+++ b/pkg/ui/menu_check_update.go
@@ -1,6 +1,7 @@
 package ui
 
 import (
+	"github.com/anhoder/foxful-cli/model"
 	"github.com/go-musicfox/go-musicfox/pkg/constants"
 	"github.com/go-musicfox/go-musicfox/utils"
 
@@ -8,7 +9,7 @@ import (
 )
 
 type CheckUpdateMenu struct {
-	DefaultMenu
+	model.DefaultMenu
 	hasUpdate bool
 }
 
@@ -20,27 +21,27 @@ func (m *CheckUpdateMenu) GetMenuKey() string {
 	return "check_update"
 }
 
-func (m *CheckUpdateMenu) MenuViews() []MenuItem {
+func (m *CheckUpdateMenu) MenuViews() []model.MenuItem {
 	if m.hasUpdate {
-		return []MenuItem{
+		return []model.MenuItem{
 			{Title: "检查到新版本，回车查看~", Subtitle: "ENTER"},
 		}
 	}
 
-	return []MenuItem{
+	return []model.MenuItem{
 		{Title: "已是最新版本"},
 	}
 }
 
-func (m *CheckUpdateMenu) SubMenu(_ *NeteaseModel, _ int) Menu {
+func (m *CheckUpdateMenu) SubMenu(_ *model.App, _ int) model.Menu {
 	if m.hasUpdate {
 		_ = open.Start(constants.AppGithubUrl)
 	}
 	return nil
 }
 
-func (m *CheckUpdateMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+func (m *CheckUpdateMenu) BeforeEnterMenuHook() model.Hook {
+	return func(main *model.Main) bool {
 		m.hasUpdate, _ = utils.CheckUpdate()
 		return true
 	}
diff --git a/pkg/ui/menu_cloud.go b/pkg/ui/menu_cloud.go
index 505a993..b6e646a 100644
--- a/pkg/ui/menu_cloud.go
+++ b/pkg/ui/menu_cloud.go
@@ -43,7 +43,7 @@ func (m *CloudMenu) MenuViews() []MenuItem {
 }
 
 func (m *CloudMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		if utils.CheckUserInfo(model.user) == utils.NeedLogin {
 			NeedLoginHandle(model, enterMenu)
 			return false
@@ -82,7 +82,7 @@ func (m *CloudMenu) BottomOutHook() Hook {
 	if !m.hasMore {
 		return nil
 	}
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		m.offset += m.limit
 
 		cloudService := service.UserCloudService{
diff --git a/pkg/ui/menu_daily_recommend_playlists.go b/pkg/ui/menu_daily_recommend_playlists.go
index 8bffb2e..8204395 100644
--- a/pkg/ui/menu_daily_recommend_playlists.go
+++ b/pkg/ui/menu_daily_recommend_playlists.go
@@ -32,7 +32,7 @@ func (m *DailyRecommendPlaylistsMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *DailyRecommendPlaylistsMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *DailyRecommendPlaylistsMenu) SubMenu(_ *Netease, index int) Menu {
 	if index >= len(m.playlists) {
 		return nil
 	}
@@ -40,7 +40,7 @@ func (m *DailyRecommendPlaylistsMenu) SubMenu(_ *NeteaseModel, index int) Menu {
 }
 
 func (m *DailyRecommendPlaylistsMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		if utils.CheckUserInfo(model.user) == utils.NeedLogin {
 			NeedLoginHandle(model, enterMenu)
 			return false
diff --git a/pkg/ui/menu_daily_recommend_songs.go b/pkg/ui/menu_daily_recommend_songs.go
index 83e0c89..bd26c83 100644
--- a/pkg/ui/menu_daily_recommend_songs.go
+++ b/pkg/ui/menu_daily_recommend_songs.go
@@ -3,6 +3,7 @@ package ui
 import (
 	"time"
 
+	"github.com/anhoder/foxful-cli/model"
 	"github.com/go-musicfox/go-musicfox/pkg/structs"
 	"github.com/go-musicfox/go-musicfox/utils"
 
@@ -11,13 +12,13 @@ import (
 
 type DailyRecommendSongsMenu struct {
 	DefaultMenu
-	menus     []MenuItem
+	menus     []model.MenuItem
 	songs     []structs.Song
 	fetchTime time.Time
 }
 
 func NewDailyRecommendSongsMenu() *DailyRecommendSongsMenu {
-	return new(DailyRecommendSongsMenu)
+	return &DailyRecommendSongsMenu{}
 }
 
 func (m *DailyRecommendSongsMenu) IsSearchable() bool {
@@ -32,12 +33,13 @@ func (m *DailyRecommendSongsMenu) GetMenuKey() string {
 	return "daily_songs"
 }
 
-func (m *DailyRecommendSongsMenu) MenuViews() []MenuItem {
+func (m *DailyRecommendSongsMenu) MenuViews() []model.MenuItem {
 	return m.menus
 }
 
-func (m *DailyRecommendSongsMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+func (m *DailyRecommendSongsMenu) BeforeEnterMenuHook() model.Hook {
+	return func(main *model.Main) bool {
+
 		if utils.CheckUserInfo(model.user) == utils.NeedLogin {
 			NeedLoginHandle(model, enterMenu)
 			return false
diff --git a/pkg/ui/menu_dj_cate_detail.go b/pkg/ui/menu_dj_cate_detail.go
index 9ff81a8..ad16631 100644
--- a/pkg/ui/menu_dj_cate_detail.go
+++ b/pkg/ui/menu_dj_cate_detail.go
@@ -35,7 +35,7 @@ func (m *DjCategoryDetailMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *DjCategoryDetailMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *DjCategoryDetailMenu) SubMenu(_ *Netease, index int) Menu {
 	if index >= len(m.radios) {
 		return nil
 	}
@@ -44,7 +44,7 @@ func (m *DjCategoryDetailMenu) SubMenu(_ *NeteaseModel, index int) Menu {
 }
 
 func (m *DjCategoryDetailMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 
 		// 不重复请求
 		if len(m.menus) > 0 && len(m.radios) > 0 {
diff --git a/pkg/ui/menu_dj_category.go b/pkg/ui/menu_dj_category.go
index 5ba74ab..431d28e 100644
--- a/pkg/ui/menu_dj_category.go
+++ b/pkg/ui/menu_dj_category.go
@@ -29,7 +29,7 @@ func (m *DjCategoryMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *DjCategoryMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *DjCategoryMenu) SubMenu(_ *Netease, index int) Menu {
 	if index >= len(m.categories) {
 		return nil
 	}
@@ -38,7 +38,7 @@ func (m *DjCategoryMenu) SubMenu(_ *NeteaseModel, index int) Menu {
 }
 
 func (m *DjCategoryMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 
 		// 不重复请求
 		if len(m.menus) > 0 && len(m.categories) > 0 {
diff --git a/pkg/ui/menu_dj_program_hours_rank.go b/pkg/ui/menu_dj_program_hours_rank.go
index e96a442..b49b428 100644
--- a/pkg/ui/menu_dj_program_hours_rank.go
+++ b/pkg/ui/menu_dj_program_hours_rank.go
@@ -34,7 +34,7 @@ func (m *DjProgramHoursRankMenu) MenuViews() []MenuItem {
 }
 
 func (m *DjProgramHoursRankMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 
 		djProgramService := service.DjProgramToplistHoursService{
 			Limit: "100",
diff --git a/pkg/ui/menu_dj_program_rank.go b/pkg/ui/menu_dj_program_rank.go
index 2229f6a..cc5c7c0 100644
--- a/pkg/ui/menu_dj_program_rank.go
+++ b/pkg/ui/menu_dj_program_rank.go
@@ -34,7 +34,7 @@ func (m *DjProgramRankMenu) MenuViews() []MenuItem {
 }
 
 func (m *DjProgramRankMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 
 		djProgramService := service.DjProgramToplistService{
 			Limit: "100",
diff --git a/pkg/ui/menu_dj_radio_detail.go b/pkg/ui/menu_dj_radio_detail.go
index 3755108..ba8d219 100644
--- a/pkg/ui/menu_dj_radio_detail.go
+++ b/pkg/ui/menu_dj_radio_detail.go
@@ -45,7 +45,7 @@ func (m *DjRadioDetailMenu) MenuViews() []MenuItem {
 }
 
 func (m *DjRadioDetailMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		djProgramService := service.DjProgramService{
 			RID:    strconv.FormatInt(m.djRadioId, 10),
 			Limit:  strconv.Itoa(m.limit),
@@ -68,7 +68,7 @@ func (m *DjRadioDetailMenu) BeforeEnterMenuHook() Hook {
 }
 
 func (m *DjRadioDetailMenu) BottomOutHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		if len(m.songs) >= m.total {
 			return true
 		}
diff --git a/pkg/ui/menu_dj_recommend.go b/pkg/ui/menu_dj_recommend.go
index 772a19a..4cdcbbd 100644
--- a/pkg/ui/menu_dj_recommend.go
+++ b/pkg/ui/menu_dj_recommend.go
@@ -29,7 +29,7 @@ func (m *DjRecommendMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *DjRecommendMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *DjRecommendMenu) SubMenu(_ *Netease, index int) Menu {
 	if index >= len(m.radios) {
 		return nil
 	}
@@ -38,7 +38,7 @@ func (m *DjRecommendMenu) SubMenu(_ *NeteaseModel, index int) Menu {
 }
 
 func (m *DjRecommendMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 
 		// 不重复请求
 		if len(m.menus) > 0 && len(m.radios) > 0 {
diff --git a/pkg/ui/menu_dj_sub_list.go b/pkg/ui/menu_dj_sub_list.go
index 2da14b3..a177d30 100644
--- a/pkg/ui/menu_dj_sub_list.go
+++ b/pkg/ui/menu_dj_sub_list.go
@@ -39,7 +39,7 @@ func (m *DjSubListMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *DjSubListMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *DjSubListMenu) SubMenu(_ *Netease, index int) Menu {
 	if index >= len(m.radios) {
 		return nil
 	}
@@ -48,7 +48,7 @@ func (m *DjSubListMenu) SubMenu(_ *NeteaseModel, index int) Menu {
 }
 
 func (m *DjSubListMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 
 		if utils.CheckUserInfo(model.user) == utils.NeedLogin {
 			NeedLoginHandle(model, enterMenu)
@@ -89,7 +89,7 @@ func (m *DjSubListMenu) BottomOutHook() Hook {
 		return nil
 	}
 
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		m.offset += m.limit
 
 		if utils.CheckUserInfo(model.user) == utils.NeedLogin {
diff --git a/pkg/ui/menu_dj_today_recommend.go b/pkg/ui/menu_dj_today_recommend.go
index 45df981..e73c4f5 100644
--- a/pkg/ui/menu_dj_today_recommend.go
+++ b/pkg/ui/menu_dj_today_recommend.go
@@ -32,7 +32,7 @@ func (m *DjTodayRecommendMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *DjTodayRecommendMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *DjTodayRecommendMenu) SubMenu(_ *Netease, index int) Menu {
 	if index >= len(m.radios) {
 		return nil
 	}
@@ -41,7 +41,7 @@ func (m *DjTodayRecommendMenu) SubMenu(_ *NeteaseModel, index int) Menu {
 }
 
 func (m *DjTodayRecommendMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 
 		// 不重复请求
 		now := time.Now()
@@ -65,7 +65,7 @@ func (m *DjTodayRecommendMenu) BeforeEnterMenuHook() Hook {
 }
 
 func (m *DjTodayRecommendMenu) BottomOutHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 
 		djTodayService := service.DjTodayPerferedService{}
 		code, response := djTodayService.DjTodayPerfered()
diff --git a/pkg/ui/menu_dj_top.go b/pkg/ui/menu_dj_top.go
index 7938709..91ec729 100644
--- a/pkg/ui/menu_dj_top.go
+++ b/pkg/ui/menu_dj_top.go
@@ -39,7 +39,7 @@ func (m *DjHotMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *DjHotMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *DjHotMenu) SubMenu(_ *Netease, index int) Menu {
 	if index >= len(m.radios) {
 		return nil
 	}
@@ -48,7 +48,7 @@ func (m *DjHotMenu) SubMenu(_ *NeteaseModel, index int) Menu {
 }
 
 func (m *DjHotMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 
 		// 不重复请求
 		if len(m.menus) > 0 && len(m.radios) > 0 {
diff --git a/pkg/ui/menu_help.go b/pkg/ui/menu_help.go
index ef12a87..99f4d6e 100644
--- a/pkg/ui/menu_help.go
+++ b/pkg/ui/menu_help.go
@@ -75,7 +75,7 @@ func (m *HelpMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *HelpMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *HelpMenu) SubMenu(_ *Netease, index int) Menu {
 	if index == 0 {
 		_ = open.Start(constants.AppGithubUrl)
 	}
diff --git a/pkg/ui/menu_high_quality_playlists.go b/pkg/ui/menu_high_quality_playlists.go
index 64b00c6..810b8ae 100644
--- a/pkg/ui/menu_high_quality_playlists.go
+++ b/pkg/ui/menu_high_quality_playlists.go
@@ -29,7 +29,7 @@ func (m *HighQualityPlaylistsMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *HighQualityPlaylistsMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *HighQualityPlaylistsMenu) SubMenu(_ *Netease, index int) Menu {
 	if index >= len(m.playlists) {
 		return nil
 	}
@@ -41,7 +41,7 @@ func (m *HighQualityPlaylistsMenu) Playlists() []structs.Playlist {
 }
 
 func (m *HighQualityPlaylistsMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		// 不重复请求
 		if len(m.menus) > 0 && len(m.playlists) > 0 {
 			return true
diff --git a/pkg/ui/menu_hot_artists.go b/pkg/ui/menu_hot_artists.go
index e84f681..aedb051 100644
--- a/pkg/ui/menu_hot_artists.go
+++ b/pkg/ui/menu_hot_artists.go
@@ -29,7 +29,7 @@ func (m *HotArtistsMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *HotArtistsMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *HotArtistsMenu) SubMenu(_ *Netease, index int) Menu {
 	if index >= len(m.artists) {
 		return nil
 	}
@@ -37,7 +37,7 @@ func (m *HotArtistsMenu) SubMenu(_ *NeteaseModel, index int) Menu {
 }
 
 func (m *HotArtistsMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		// 不重复请求
 		if len(m.menus) > 0 && len(m.artists) > 0 {
 			return true
diff --git a/pkg/ui/menu_local_search_res.go b/pkg/ui/menu_local_search_res.go
index cb6bb2f..4888659 100644
--- a/pkg/ui/menu_local_search_res.go
+++ b/pkg/ui/menu_local_search_res.go
@@ -46,7 +46,7 @@ func (m *LocalSearchMenu) MenuViews() []MenuItem {
 	return items
 }
 
-func (m *LocalSearchMenu) SubMenu(model *NeteaseModel, index int) Menu {
+func (m *LocalSearchMenu) SubMenu(model *Netease, index int) Menu {
 	if index > len(m.resItems)-1 {
 		return nil
 	}
diff --git a/pkg/ui/menu_main.go b/pkg/ui/menu_main.go
index 4be51ba..e88193e 100644
--- a/pkg/ui/menu_main.go
+++ b/pkg/ui/menu_main.go
@@ -1,16 +1,19 @@
 package ui
 
+import (
+	"github.com/anhoder/foxful-cli/model"
+)
+
 type MainMenu struct {
 	DefaultMenu
-	menus    []MenuItem
+	menus    []model.MenuItem
 	menuList []Menu
-	model    *NeteaseModel
+	model    *Netease
 }
 
-func NewMainMenu(m *NeteaseModel) *MainMenu {
-
+func NewMainMenu(m *Netease) *MainMenu {
 	mainMenu := new(MainMenu)
-	mainMenu.menus = []MenuItem{
+	mainMenu.menus = []model.MenuItem{
 		{Title: "每日推荐歌曲"},
 		{Title: "每日推荐歌单"},
 		{Title: "我的歌单"},
@@ -50,7 +53,7 @@ func NewMainMenu(m *NeteaseModel) *MainMenu {
 	return mainMenu
 }
 
-func (m *MainMenu) FormatMenuItem(item *MenuItem) {
+func (m *MainMenu) FormatMenuItem(item *model.MenuItem) {
 	var subtitle = "[未登录]"
 	if m.model.user != nil {
 		subtitle = "[" + m.model.user.Nickname + "]"
@@ -62,14 +65,14 @@ func (m *MainMenu) GetMenuKey() string {
 	return "main_menu"
 }
 
-func (m *MainMenu) MenuViews() []MenuItem {
+func (m *MainMenu) MenuViews() []model.MenuItem {
 	for i, menu := range m.menuList {
 		menu.FormatMenuItem(&m.menus[i])
 	}
 	return m.menus
 }
 
-func (m *MainMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *MainMenu) SubMenu(_ *model.App, index int) model.Menu {
 	if index >= len(m.menuList) {
 		return nil
 	}
diff --git a/pkg/ui/menu_personal_fm.go b/pkg/ui/menu_personal_fm.go
index 5259951..24d5930 100644
--- a/pkg/ui/menu_personal_fm.go
+++ b/pkg/ui/menu_personal_fm.go
@@ -40,7 +40,7 @@ func (m *PersonalFmMenu) MenuViews() []MenuItem {
 }
 
 func (m *PersonalFmMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		// 已有数据
 		if len(m.menus) > 0 && len(m.songs) > 0 {
 			return true
@@ -62,7 +62,7 @@ func (m *PersonalFmMenu) BeforeEnterMenuHook() Hook {
 }
 
 func (m *PersonalFmMenu) BottomOutHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		personalFm := service.PersonalFmService{}
 		code, response := personalFm.PersonalFm()
 		codeType := utils.CheckCode(code)
diff --git a/pkg/ui/menu_playlist_detail.go b/pkg/ui/menu_playlist_detail.go
index d88dd3f..31163ad 100644
--- a/pkg/ui/menu_playlist_detail.go
+++ b/pkg/ui/menu_playlist_detail.go
@@ -40,7 +40,7 @@ func (m *PlaylistDetailMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *PlaylistDetailMenu) SubMenu(_ *NeteaseModel, _ int) Menu {
+func (m *PlaylistDetailMenu) SubMenu(_ *Netease, _ int) Menu {
 	return nil
 }
 
@@ -66,7 +66,7 @@ func getSongsInPlaylist(playlistId int64, getAll bool) (codeType utils.ResCode,
 }
 
 func (m *PlaylistDetailMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		codeType, songs := getSongsInPlaylist(m.playlistId, configs.ConfigRegistry.MainShowAllSongsOfPlaylist)
 		if codeType == utils.NeedLogin {
 			NeedLoginHandle(model, enterMenu)
diff --git a/pkg/ui/menu_radio_dj_type.go b/pkg/ui/menu_radio_dj_type.go
index 544ae90..263e8a2 100644
--- a/pkg/ui/menu_radio_dj_type.go
+++ b/pkg/ui/menu_radio_dj_type.go
@@ -40,7 +40,7 @@ func (m *RadioDjTypeMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *RadioDjTypeMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *RadioDjTypeMenu) SubMenu(_ *Netease, index int) Menu {
 	if index >= len(m.menuList) {
 		return nil
 	}
diff --git a/pkg/ui/menu_ranks.go b/pkg/ui/menu_ranks.go
index 5924ec2..fc408c7 100644
--- a/pkg/ui/menu_ranks.go
+++ b/pkg/ui/menu_ranks.go
@@ -31,7 +31,7 @@ func (m *RanksMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *RanksMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *RanksMenu) SubMenu(_ *Netease, index int) Menu {
 	if index >= len(m.ranks) {
 		return nil
 	}
@@ -40,7 +40,7 @@ func (m *RanksMenu) SubMenu(_ *NeteaseModel, index int) Menu {
 }
 
 func (m *RanksMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		if len(m.menus) > 0 && len(m.ranks) > 0 {
 			return true
 		}
diff --git a/pkg/ui/menu_recent_songs.go b/pkg/ui/menu_recent_songs.go
index 74d7980..c9d92c7 100644
--- a/pkg/ui/menu_recent_songs.go
+++ b/pkg/ui/menu_recent_songs.go
@@ -33,7 +33,7 @@ func (m *RecentSongsMenu) MenuViews() []MenuItem {
 }
 
 func (m *RecentSongsMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		if utils.CheckUserInfo(model.user) == utils.NeedLogin {
 			NeedLoginHandle(model, enterMenu)
 			return false
diff --git a/pkg/ui/menu_search_result.go b/pkg/ui/menu_search_result.go
index dd4a43d..c067716 100644
--- a/pkg/ui/menu_search_result.go
+++ b/pkg/ui/menu_search_result.go
@@ -42,7 +42,7 @@ func (m *SearchResultMenu) IsSearchable() bool {
 }
 
 func (m *SearchResultMenu) BeforeBackMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		if model.searchModel.wordsInput.Value() != "" {
 			model.searchModel.wordsInput.SetValue("")
 		}
@@ -63,7 +63,7 @@ func (m *SearchResultMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *SearchResultMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *SearchResultMenu) SubMenu(_ *Netease, index int) Menu {
 	switch resultWithType := m.result.(type) {
 	case []ds2.Song:
 		return nil
@@ -98,7 +98,7 @@ func (m *SearchResultMenu) SubMenu(_ *NeteaseModel, index int) Menu {
 }
 
 func (m *SearchResultMenu) BottomOutHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		var (
 			code     float64
 			response []byte
@@ -125,7 +125,7 @@ func (m *SearchResultMenu) BottomOutHook() Hook {
 }
 
 func (m *SearchResultMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		if model.searchModel.wordsInput.Value() == "" {
 			// 显示搜索页面
 			model.searchModel.SearchHandle(model, m.searchType)
diff --git a/pkg/ui/menu_search_type.go b/pkg/ui/menu_search_type.go
index 1d8d50b..ccac0b1 100644
--- a/pkg/ui/menu_search_type.go
+++ b/pkg/ui/menu_search_type.go
@@ -28,7 +28,7 @@ func (m *SearchTypeMenu) MenuViews() []MenuItem {
 	return m.menus
 }
 
-func (m *SearchTypeMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *SearchTypeMenu) SubMenu(_ *Netease, index int) Menu {
 
 	typeArr := []SearchType{
 		StSingleSong,
diff --git a/pkg/ui/menu_user_playlist.go b/pkg/ui/menu_user_playlist.go
index 979b706..53cfb1b 100644
--- a/pkg/ui/menu_user_playlist.go
+++ b/pkg/ui/menu_user_playlist.go
@@ -47,7 +47,7 @@ func (m *UserPlaylistMenu) Playlists() []structs.Playlist {
 	return m.playlists
 }
 
-func (m *UserPlaylistMenu) SubMenu(_ *NeteaseModel, index int) Menu {
+func (m *UserPlaylistMenu) SubMenu(_ *Netease, index int) Menu {
 	if len(m.playlists) < index {
 		return nil
 	}
@@ -82,7 +82,7 @@ func getUserPlaylists(userId int64, limit int, offset int) (codeType utils.ResCo
 }
 
 func (m *UserPlaylistMenu) BeforeEnterMenuHook() Hook {
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		// 等于0，获取当前用户歌单
 		if m.userId == CurUser && utils.CheckUserInfo(model.user) == utils.NeedLogin {
 			NeedLoginHandle(model, enterMenu)
@@ -119,7 +119,7 @@ func (m *UserPlaylistMenu) BottomOutHook() Hook {
 	if !m.hasMore {
 		return nil
 	}
-	return func(model *NeteaseModel) bool {
+	return func(model *Netease) bool {
 		userId := m.userId
 		if m.userId == CurUser {
 			// 等于0，获取当前用户歌单
diff --git a/pkg/ui/netease.go b/pkg/ui/netease.go
index 1ae1b79..1e2eb42 100644
--- a/pkg/ui/netease.go
+++ b/pkg/ui/netease.go
@@ -11,6 +11,7 @@ import (
 	"strings"
 	"time"
 
+	"github.com/anhoder/foxful-cli/model"
 	"github.com/go-musicfox/go-musicfox/pkg/configs"
 	"github.com/go-musicfox/go-musicfox/pkg/constants"
 	"github.com/go-musicfox/go-musicfox/pkg/lastfm"
@@ -20,61 +21,30 @@ import (
 	"github.com/go-musicfox/go-musicfox/utils"
 	"github.com/go-musicfox/go-musicfox/utils/like_list"
 
-	tea "github.com/charmbracelet/bubbletea"
 	"github.com/go-musicfox/netease-music/service"
 	"github.com/go-musicfox/netease-music/util"
-	"github.com/mattn/go-runewidth"
 	"github.com/telanflow/cookiejar"
 )
 
-type NeteaseModel struct {
-	WindowWidth    int
-	WindowHeight   int
-	isListeningKey bool
-	program        *tea.Program
-	user           *structs.User
-	lastfm         *lastfm.Client
-	lastfmUser     *storage.LastfmUser
+type Netease struct {
+	user       *structs.User
+	lastfm     *lastfm.Client
+	lastfmUser *storage.LastfmUser
 
-	// startup
-	startup *StartupModel
-
-	// main ui
-	*MainUIModel
-
-	// login
-	loginModel *LoginModel
-
-	// search
-	searchModel *SearchModel
+	*model.App
+	player *Player
 }
 
-// NewNeteaseModel get netease model
-func NewNeteaseModel(loadingDuration time.Duration) (m *NeteaseModel) {
-	m = new(NeteaseModel)
-	m.isListeningKey = !configs.ConfigRegistry.StartupShow
+func NewNetease(app *model.App) *Netease {
+	m := new(Netease)
 	m.lastfm = lastfm.NewClient()
+	m.player = NewPlayer(m)
+	m.App = app
 
-	// startup
-	m.startup = NewStartup()
-	m.startup.TotalDuration = loadingDuration
-
-	// main menu
-	m.MainUIModel = NewMainUIModel(m)
-
-	// login
-	m.loginModel = NewLogin()
-
-	// search
-	m.searchModel = NewSearch()
-
-	// 东亚
-	runewidth.DefaultCondition.EastAsianWidth = false
-
-	return
+	return m
 }
 
-func (m *NeteaseModel) Init() tea.Cmd {
+func (m *Netease) InitHook(_ *model.App) {
 	config := configs.ConfigRegistry
 	projectDir := utils.GetLocalDataDir()
 
@@ -95,7 +65,6 @@ func (m *NeteaseModel) Init() tea.Cmd {
 				m.user = &user
 			}
 		}
-		m.refreshMenuTitle() // 刷新界面用户名
 
 		// 获取lastfm用户信息
 		var lastfmUser storage.LastfmUser
@@ -105,7 +74,7 @@ func (m *NeteaseModel) Init() tea.Cmd {
 				m.lastfm.SetSession(lastfmUser.SessionKey)
 			}
 		}
-		m.refreshMenuList()
+		m.MustMain().RefreshMenuList()
 
 		// 获取播放模式
 		if jsonStr, err := table.GetByKVModel(storage.PlayMode{}); err == nil && len(jsonStr) > 0 {
@@ -212,9 +181,10 @@ func (m *NeteaseModel) Init() tea.Cmd {
 		if config.StartupCheckUpdate {
 			if ok, newVersion := utils.CheckUpdate(); ok {
 				if runtime.GOOS == "windows" {
-					enterMenu(m, NewCheckUpdateMenu(),
-						&MenuItem{Title: "新版本: " + newVersion,
-							Subtitle: "当前版本: " + constants.AppVersion})
+					m.MustMain().EnterMenu(
+						NewCheckUpdateMenu(),
+						&model.MenuItem{Title: "新版本: " + newVersion, Subtitle: "当前版本: " + constants.AppVersion},
+					)
 				}
 
 				utils.Notify(utils.NotifyContent{
@@ -226,6 +196,7 @@ func (m *NeteaseModel) Init() tea.Cmd {
 		}
 
 		// 自动播放
+		// TODO optimize
 		if config.AutoPlay {
 			var (
 				notice   string // 错误通知文本
@@ -301,14 +272,13 @@ func (m *NeteaseModel) Init() tea.Cmd {
 			}
 		}
 	})
+}
 
-	if config.StartupShow {
-		return tickStartup(time.Nanosecond)
-	}
-
-	return tickMainUI(time.Nanosecond)
+func (m *Netease) CloseHook(_ *model.App) {
+	m.player.Close()
 }
 
+// TODO optimize
 func getDailySongs() (playlist []structs.Song, notice string) {
 	recommendSongs := service.RecommendSongsService{}
 	code, response := recommendSongs.RecommendSongs()
@@ -321,6 +291,7 @@ func getDailySongs() (playlist []structs.Song, notice string) {
 	return
 }
 
+// TODO optimize
 func getLikeSongs(userId int64, getAll bool) (playlist []structs.Song, notice string) {
 	var (
 		codeType  utils.ResCode
@@ -341,6 +312,7 @@ func getLikeSongs(userId int64, getAll bool) (playlist []structs.Song, notice st
 	return
 }
 
+// TODO optimize
 func getPlaylistByName(userId int64, playlistName string, getAll bool) (playlist []structs.Song, notice string) {
 	var (
 		playlistId int64
@@ -377,83 +349,3 @@ Loop:
 	playlist = songs
 	return
 }
-
-func (m *NeteaseModel) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
-	// Make sure these keys always quit
-	switch msgWithType := msg.(type) {
-	case tea.KeyMsg:
-		k := msgWithType.String()
-		// 账号登录或搜索页输入q不退出
-		if m.pageType == PtMain && !m.inSearching && (k == "q" || k == "Q" || k == "ctrl+c") {
-			m.startup.quitting = true
-			m.Close()
-			return m, tea.Quit
-		}
-	case tea.WindowSizeMsg:
-		m.WindowHeight = msgWithType.Height
-		m.WindowWidth = msgWithType.Width
-	}
-
-	if _, ok := msg.(tea.WindowSizeMsg); ok {
-		m.MainUIModel.update(msg, m)
-	}
-
-	// Hand off the message and model to the appropriate update function for the
-	// appropriate view based on the current state.
-	if configs.ConfigRegistry.StartupShow && !m.startup.loaded {
-		return m.startup.update(msg, m)
-	}
-
-	switch m.pageType {
-	case PtLogin:
-		return updateLogin(msg, m)
-	case PtSearch:
-		return m.searchModel.update(msg, m)
-	}
-
-	return m.MainUIModel.update(msg, m)
-}
-
-func (m *NeteaseModel) View() string {
-	if m.startup.quitting || m.WindowWidth <= 0 || m.WindowHeight <= 0 {
-		return ""
-	}
-
-	if configs.ConfigRegistry.StartupShow && !m.startup.loaded {
-		return m.startup.view(m)
-	}
-
-	switch m.pageType {
-	case PtLogin:
-		return loginView(m)
-	case PtSearch:
-		return m.searchModel.view(m)
-	}
-
-	return m.MainUIModel.view(m)
-}
-
-func (m *NeteaseModel) BindProgram(program *tea.Program) {
-	m.program = program
-}
-
-func (m *NeteaseModel) Rerender(cleanScreen bool) {
-	if m.program == nil {
-		return
-	}
-	ticker := m.rerenderTicker(cleanScreen)
-	m.program.Send(ticker())
-}
-
-func (m *NeteaseModel) rerenderTicker(cleanScreen bool) tea.Cmd {
-	return func() tea.Msg {
-		if cleanScreen {
-			m.program.Send(tea.ClearScreen())
-		}
-		return MsgOfPageType(m.pageType)
-	}
-}
-
-func (m *NeteaseModel) Close() {
-	m.MainUIModel.Close()
-}
diff --git a/pkg/ui/operate.go b/pkg/ui/operate.go
index 4561a11..d059082 100644
--- a/pkg/ui/operate.go
+++ b/pkg/ui/operate.go
@@ -30,7 +30,7 @@ type menuStackItem struct {
 }
 
 // 上移
-func moveUp(m *NeteaseModel) {
+func moveUp(m *Netease) {
 	topHook := m.menu.TopOutHook()
 	if m.doubleColumn {
 		if m.selectedIndex-2 < 0 && topHook != nil {
@@ -70,7 +70,7 @@ func moveUp(m *NeteaseModel) {
 }
 
 // 下移
-func moveDown(m *NeteaseModel) {
+func moveDown(m *Netease) {
 	bottomHook := m.menu.BottomOutHook()
 	if m.doubleColumn {
 		if m.selectedIndex+2 > len(m.menuList)-1 && bottomHook != nil {
@@ -109,7 +109,7 @@ func moveDown(m *NeteaseModel) {
 }
 
 // 左移
-func moveLeft(m *NeteaseModel) {
+func moveLeft(m *Netease) {
 	if !m.doubleColumn || m.selectedIndex%2 == 0 || m.selectedIndex-1 < 0 {
 		return
 	}
@@ -117,7 +117,7 @@ func moveLeft(m *NeteaseModel) {
 }
 
 // 右移
-func moveRight(m *NeteaseModel) {
+func moveRight(m *Netease) {
 	if !m.doubleColumn || m.selectedIndex%2 != 0 {
 		return
 	}
@@ -138,7 +138,7 @@ func moveRight(m *NeteaseModel) {
 }
 
 // 上移到顶部
-func moveTop(m *NeteaseModel) {
+func moveTop(m *Netease) {
 	if m.doubleColumn {
 		m.selectedIndex = m.selectedIndex % 2
 	} else {
@@ -148,7 +148,7 @@ func moveTop(m *NeteaseModel) {
 }
 
 // 下移到底部
-func moveBottom(m *NeteaseModel) {
+func moveBottom(m *Netease) {
 	if m.doubleColumn && len(m.menuList)%2 == 0 {
 		m.selectedIndex = len(m.menuList) + (m.selectedIndex%2 - 2)
 	} else if m.doubleColumn && m.selectedIndex%2 != 0 {
@@ -163,7 +163,7 @@ func moveBottom(m *NeteaseModel) {
 }
 
 // 切换到上一页
-func prePage(m *NeteaseModel) {
+func prePage(m *Netease) {
 	m.isListeningKey = false
 	defer func() {
 		m.isListeningKey = true
@@ -186,7 +186,7 @@ func prePage(m *NeteaseModel) {
 }
 
 // 切换到下一页
-func nextPage(m *NeteaseModel) {
+func nextPage(m *Netease) {
 	m.isListeningKey = false
 	defer func() {
 		m.isListeningKey = true
@@ -208,7 +208,7 @@ func nextPage(m *NeteaseModel) {
 	m.menuCurPage++
 }
 
-func enterKeyHandle(m *NeteaseModel) {
+func enterKeyHandle(m *Netease) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
@@ -222,7 +222,7 @@ func enterKeyHandle(m *NeteaseModel) {
 }
 
 // 进入菜单
-func enterMenu(m *NeteaseModel, newMenu Menu, newTitle *MenuItem) {
+func enterMenu(m *Netease, newMenu Menu, newTitle *MenuItem) {
 	m.isListeningKey = false
 	defer func() {
 		m.isListeningKey = true
@@ -279,7 +279,7 @@ func enterMenu(m *NeteaseModel, newMenu Menu, newTitle *MenuItem) {
 }
 
 // 菜单返回
-func backMenu(m *NeteaseModel) {
+func backMenu(m *Netease) {
 	m.isListeningKey = false
 	defer func() {
 		m.isListeningKey = true
@@ -316,7 +316,7 @@ func backMenu(m *NeteaseModel) {
 }
 
 // 空格监听
-func spaceKeyHandle(m *NeteaseModel) {
+func spaceKeyHandle(m *Netease) {
 	var (
 		songs         []structs.Song
 		inPlayingMenu = m.player.InPlayingMenu()
@@ -368,7 +368,7 @@ func spaceKeyHandle(m *NeteaseModel) {
 }
 
 // likePlayingSong like/unlike playing song
-func likePlayingSong(m *NeteaseModel, isLike bool) {
+func likePlayingSong(m *Netease, isLike bool) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
@@ -378,7 +378,7 @@ func likePlayingSong(m *NeteaseModel, isLike bool) {
 	}
 
 	if utils.CheckUserInfo(m.user) == utils.NeedLogin {
-		NeedLoginHandle(m, func(m *NeteaseModel, newMenu Menu, newTitle *MenuItem) {
+		NeedLoginHandle(m, func(m *Netease, newMenu Menu, newTitle *MenuItem) {
 			likePlayingSong(m, isLike)
 		})
 		return
@@ -394,7 +394,7 @@ func likePlayingSong(m *NeteaseModel, isLike bool) {
 		code, response := userPlaylists.UserPlaylist()
 		codeType := utils.CheckCode(code)
 		if codeType == utils.NeedLogin {
-			NeedLoginHandle(m, func(m *NeteaseModel, newMenu Menu, newTitle *MenuItem) {
+			NeedLoginHandle(m, func(m *Netease, newMenu Menu, newTitle *MenuItem) {
 				likePlayingSong(m, isLike)
 			})
 			return
@@ -476,7 +476,7 @@ func logout() {
 }
 
 // likeSelectedSong like/unlike selected song
-func likeSelectedSong(m *NeteaseModel, isLike bool) {
+func likeSelectedSong(m *Netease, isLike bool) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
@@ -489,7 +489,7 @@ func likeSelectedSong(m *NeteaseModel, isLike bool) {
 	songs := menu.Songs()
 
 	if utils.CheckUserInfo(m.user) == utils.NeedLogin {
-		NeedLoginHandle(m, func(m *NeteaseModel, newMenu Menu, newTitle *MenuItem) {
+		NeedLoginHandle(m, func(m *Netease, newMenu Menu, newTitle *MenuItem) {
 			likeSelectedSong(m, isLike)
 		})
 		return
@@ -505,7 +505,7 @@ func likeSelectedSong(m *NeteaseModel, isLike bool) {
 		code, response := userPlaylists.UserPlaylist()
 		codeType := utils.CheckCode(code)
 		if codeType == utils.NeedLogin {
-			NeedLoginHandle(m, func(m *NeteaseModel, newMenu Menu, newTitle *MenuItem) {
+			NeedLoginHandle(m, func(m *Netease, newMenu Menu, newTitle *MenuItem) {
 				likeSelectedSong(m, isLike)
 			})
 			return
@@ -568,7 +568,7 @@ func likeSelectedSong(m *NeteaseModel, isLike bool) {
 }
 
 // trashPlayingSong 标记为不喜欢
-func trashPlayingSong(m *NeteaseModel) {
+func trashPlayingSong(m *Netease) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
@@ -578,7 +578,7 @@ func trashPlayingSong(m *NeteaseModel) {
 	}
 
 	if utils.CheckUserInfo(m.user) == utils.NeedLogin {
-		NeedLoginHandle(m, func(m *NeteaseModel, newMenu Menu, newTitle *MenuItem) {
+		NeedLoginHandle(m, func(m *Netease, newMenu Menu, newTitle *MenuItem) {
 			trashPlayingSong(m)
 		})
 		return
@@ -598,7 +598,7 @@ func trashPlayingSong(m *NeteaseModel) {
 }
 
 // trashSelectedSong 标记为不喜欢
-func trashSelectedSong(m *NeteaseModel) {
+func trashSelectedSong(m *Netease) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
@@ -611,7 +611,7 @@ func trashSelectedSong(m *NeteaseModel) {
 	songs := menu.Songs()
 
 	if utils.CheckUserInfo(m.user) == utils.NeedLogin {
-		NeedLoginHandle(m, func(m *NeteaseModel, newMenu Menu, newTitle *MenuItem) {
+		NeedLoginHandle(m, func(m *Netease, newMenu Menu, newTitle *MenuItem) {
 			trashSelectedSong(m)
 		})
 		return
@@ -631,7 +631,7 @@ func trashSelectedSong(m *NeteaseModel) {
 }
 
 // 搜索当前菜单
-func searchMenuHandle(m *NeteaseModel) {
+func searchMenuHandle(m *Netease) {
 	m.inSearching = false
 	enterMenu(m, NewSearchMenu(m.menu, m.searchInput.Value()), &MenuItem{Title: "搜索结果", Subtitle: m.searchInput.Value()})
 	m.searchInput.Blur()
@@ -639,7 +639,7 @@ func searchMenuHandle(m *NeteaseModel) {
 }
 
 // 下载当前音乐
-func downloadSelectedSong(m *NeteaseModel) {
+func downloadSelectedSong(m *Netease) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
@@ -653,7 +653,7 @@ func downloadSelectedSong(m *NeteaseModel) {
 	go utils.DownloadMusic(songs[selectedIndex])
 }
 
-func downloadPlayingSong(m *NeteaseModel) {
+func downloadPlayingSong(m *Netease) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
@@ -665,7 +665,7 @@ func downloadPlayingSong(m *NeteaseModel) {
 	go utils.DownloadMusic(m.player.playlist[m.player.curSongIndex])
 }
 
-func albumOfPlayingSong(m *NeteaseModel) {
+func albumOfPlayingSong(m *Netease) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
@@ -683,7 +683,7 @@ func albumOfPlayingSong(m *NeteaseModel) {
 	enterMenu(m, NewAlbumDetailMenu(curSong.Album.Id), &MenuItem{Title: curSong.Album.Name, Subtitle: "「" + curSong.Name + "」所属专辑"})
 }
 
-func albumOfSelectedSong(m *NeteaseModel) {
+func albumOfSelectedSong(m *Netease) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
@@ -703,7 +703,7 @@ func albumOfSelectedSong(m *NeteaseModel) {
 	enterMenu(m, NewAlbumDetailMenu(songs[selectedIndex].Album.Id), &MenuItem{Title: songs[selectedIndex].Album.Name, Subtitle: "「" + songs[selectedIndex].Name + "」所属专辑"})
 }
 
-func artistOfPlayingSong(m *NeteaseModel) {
+func artistOfPlayingSong(m *Netease) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
@@ -731,7 +731,7 @@ func artistOfPlayingSong(m *NeteaseModel) {
 	enterMenu(m, NewArtistsOfSongMenu(curSong), &MenuItem{Title: "「" + curSong.Name + "」所属歌手"})
 }
 
-func artistOfSelectedSong(m *NeteaseModel) {
+func artistOfSelectedSong(m *Netease) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
@@ -762,7 +762,7 @@ func artistOfSelectedSong(m *NeteaseModel) {
 	enterMenu(m, NewArtistsOfSongMenu(song), &MenuItem{Title: "「" + song.Name + "」所属歌手"})
 }
 
-func openPlayingSongInWeb(m *NeteaseModel) {
+func openPlayingSongInWeb(m *Netease) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
@@ -775,7 +775,7 @@ func openPlayingSongInWeb(m *NeteaseModel) {
 	_ = open.Start(utils.WebUrlOfSong(curSong.Id))
 }
 
-func openSelectedItemInWeb(m *NeteaseModel) {
+func openSelectedItemInWeb(m *Netease) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
@@ -808,7 +808,7 @@ func openSelectedItemInWeb(m *NeteaseModel) {
 }
 
 // collectSelectedPlaylist 收藏选中歌单
-func collectSelectedPlaylist(m *NeteaseModel, isCollect bool) {
+func collectSelectedPlaylist(m *Netease, isCollect bool) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
@@ -859,7 +859,7 @@ func collectSelectedPlaylist(m *NeteaseModel, isCollect bool) {
 }
 
 // addSongToPlaylist 添加歌曲到播放列表
-func addSongToPlaylist(m *NeteaseModel, addToNext bool) {
+func addSongToPlaylist(m *Netease, addToNext bool) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
@@ -903,7 +903,7 @@ func addSongToPlaylist(m *NeteaseModel, addToNext bool) {
 }
 
 // openAddSongToUserPlaylistMenu 打开添加歌曲到用户歌单菜单
-func openAddSongToUserPlaylistMenu(m *NeteaseModel, isSelected, isAdd bool) {
+func openAddSongToUserPlaylistMenu(m *Netease, isSelected, isAdd bool) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
@@ -938,13 +938,13 @@ func openAddSongToUserPlaylistMenu(m *NeteaseModel, isSelected, isAdd bool) {
 }
 
 // addSongToUserPlaylist 添加歌曲到用户歌单
-func addSongToUserPlaylist(m *NeteaseModel, isAdd bool) {
+func addSongToUserPlaylist(m *Netease, isAdd bool) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
 
 	if utils.CheckUserInfo(m.user) == utils.NeedLogin {
-		NeedLoginHandle(m, func(m *NeteaseModel, newMenu Menu, newTitle *MenuItem) {
+		NeedLoginHandle(m, func(m *Netease, newMenu Menu, newTitle *MenuItem) {
 			addSongToUserPlaylist(m, isAdd)
 		})
 		return
@@ -1011,7 +1011,7 @@ func addSongToUserPlaylist(m *NeteaseModel, isAdd bool) {
 }
 
 // 从播放列表删除选中歌曲,仅在当前播放列表界面有效
-func delSongFromPlaylist(m *NeteaseModel) {
+func delSongFromPlaylist(m *Netease) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
@@ -1068,7 +1068,7 @@ func delSongFromPlaylist(m *NeteaseModel) {
 	m.refreshMenuList()
 }
 
-func clearSongCache(m *NeteaseModel) {
+func clearSongCache(m *Netease) {
 	loading := NewLoading(m)
 	loading.start()
 	defer loading.complete()
diff --git a/pkg/ui/page.go b/pkg/ui/page.go
index 6cf9753..be3d4e8 100644
--- a/pkg/ui/page.go
+++ b/pkg/ui/page.go
@@ -3,6 +3,6 @@ package ui
 import tea "github.com/charmbracelet/bubbletea"
 
 type Page interface {
-	update(msg tea.Msg, m *NeteaseModel) (tea.Model, tea.Cmd)
-	view(m *NeteaseModel) string
+	update(msg tea.Msg, m *Netease) (tea.Model, tea.Cmd)
+	view(m *Netease) string
 }
diff --git a/pkg/ui/player.go b/pkg/ui/player.go
index be472db..bf23a1b 100644
--- a/pkg/ui/player.go
+++ b/pkg/ui/player.go
@@ -54,7 +54,7 @@ const (
 
 // Player 网易云音乐播放器
 type Player struct {
-	model  *NeteaseModel
+	model  *Netease
 	cancel context.CancelFunc
 
 	playlist         []structs.Song // 歌曲列表
@@ -84,7 +84,7 @@ type Player struct {
 	player.Player // 播放器
 }
 
-func NewPlayer(model *NeteaseModel) *Player {
+func NewPlayer(model *Netease) *Player {
 	p := &Player{
 		model:             model,
 		mode:              player.PmListLoop,
@@ -676,7 +676,7 @@ func (p *Player) Intelligence(appendMode bool) {
 	code, response := intelligenceService.PlaymodeIntelligenceList()
 	codeType := utils.CheckCode(code)
 	if codeType == utils.NeedLogin {
-		NeedLoginHandle(p.model, func(m *NeteaseModel, newMenu Menu, newTitle *MenuItem) {
+		NeedLoginHandle(p.model, func(m *Netease, newMenu Menu, newTitle *MenuItem) {
 			p.Intelligence(appendMode)
 		})
 		return
diff --git a/pkg/ui/search.go b/pkg/ui/search.go
index ba1750d..8f6ccf7 100644
--- a/pkg/ui/search.go
+++ b/pkg/ui/search.go
@@ -66,7 +66,7 @@ func NewSearch() (search *SearchModel) {
 }
 
 // update search
-func (s *SearchModel) update(msg tea.Msg, m *NeteaseModel) (tea.Model, tea.Cmd) {
+func (s *SearchModel) update(msg tea.Msg, m *Netease) (tea.Model, tea.Cmd) {
 
 	switch msg := msg.(type) {
 	case tickSearchMsg:
@@ -186,7 +186,7 @@ func (s *SearchModel) update(msg tea.Msg, m *NeteaseModel) (tea.Model, tea.Cmd)
 	return s.updateSearchInputs(msg, m)
 }
 
-func (s *SearchModel) updateSearchInputs(msg tea.Msg, m *NeteaseModel) (tea.Model, tea.Cmd) {
+func (s *SearchModel) updateSearchInputs(msg tea.Msg, m *Netease) (tea.Model, tea.Cmd) {
 	var (
 		cmd  tea.Cmd
 		cmds []tea.Cmd
@@ -198,7 +198,7 @@ func (s *SearchModel) updateSearchInputs(msg tea.Msg, m *NeteaseModel) (tea.Mode
 	return m, tea.Batch(cmds...)
 }
 
-func (s *SearchModel) view(m *NeteaseModel) string {
+func (s *SearchModel) view(m *Netease) string {
 	var builder strings.Builder
 
 	// 距离顶部的行数
@@ -277,7 +277,7 @@ func (s *SearchModel) view(m *NeteaseModel) string {
 }
 
 // SearchHandle 搜索
-func (s *SearchModel) SearchHandle(model *NeteaseModel, searchType SearchType) {
+func (s *SearchModel) SearchHandle(model *Netease, searchType SearchType) {
 	model.pageType = PtSearch
 	model.searchModel.searchType = searchType
 }
diff --git a/pkg/ui/startup.go b/pkg/ui/startup.go
index a1168b2..3700b90 100644
--- a/pkg/ui/startup.go
+++ b/pkg/ui/startup.go
@@ -38,7 +38,7 @@ func NewStartup() (m *StartupModel) {
 }
 
 // startup func
-func (s *StartupModel) update(msg tea.Msg, m *NeteaseModel) (tea.Model, tea.Cmd) {
+func (s *StartupModel) update(msg tea.Msg, m *Netease) (tea.Model, tea.Cmd) {
 	switch msg.(type) {
 	case tickStartupMsg:
 		if s.loadedDuration >= s.TotalDuration {
@@ -58,7 +58,7 @@ func (s *StartupModel) update(msg tea.Msg, m *NeteaseModel) (tea.Model, tea.Cmd)
 }
 
 // startup view
-func (s *StartupModel) view(m *NeteaseModel) string {
+func (s *StartupModel) view(m *Netease) string {
 
 	if m.WindowWidth <= 0 || m.WindowHeight <= 0 {
 		return ""
@@ -97,7 +97,7 @@ func (s *StartupModel) view(m *NeteaseModel) string {
 }
 
 // get logo
-func (s *StartupModel) logoView(m *NeteaseModel) string {
+func (s *StartupModel) logoView(m *Netease) string {
 	if m.WindowWidth <= 0 || m.WindowHeight <= 0 {
 		return ""
 	}
@@ -125,7 +125,7 @@ func (s *StartupModel) logoView(m *NeteaseModel) string {
 }
 
 // get tips
-func (s *StartupModel) tipsView(m *NeteaseModel) string {
+func (s *StartupModel) tipsView(m *Netease) string {
 	example := "Enter after 11.1 seconds..."
 	var left int
 	if m.WindowWidth-len(example) > 0 {
@@ -139,7 +139,7 @@ func (s *StartupModel) tipsView(m *NeteaseModel) string {
 }
 
 // get progress
-func (s *StartupModel) progressView(m *NeteaseModel) string {
+func (s *StartupModel) progressView(m *Netease) string {
 	width := float64(m.WindowWidth)
 
 	if progressStartColor == "" || progressEndColor == "" {
diff --git a/vendor/github.com/anhoder/foxful-cli/model/app.go b/vendor/github.com/anhoder/foxful-cli/model/app.go
new file mode 100644
index 0000000..f756bb1
--- /dev/null
+++ b/vendor/github.com/anhoder/foxful-cli/model/app.go
@@ -0,0 +1,190 @@
+package model
+
+import (
+	"time"
+
+	"github.com/anhoder/foxful-cli/util"
+	tea "github.com/charmbracelet/bubbletea"
+	"github.com/mattn/go-runewidth"
+)
+
+type App struct {
+	windowWidth  int
+	windowHeight int
+	options      *Options
+
+	program *tea.Program
+
+	startup *StartupPage
+	main    *Main
+
+	page Page // current page
+}
+
+// NewApp create application
+func NewApp(options *Options) (a *App) {
+	a = &App{
+		options: options,
+		page:    options.InitPage,
+	}
+
+	runewidth.DefaultCondition.EastAsianWidth = false
+
+	return
+}
+
+type WithOption func(options *Options)
+
+func (a *App) With(w ...WithOption) *App {
+	for _, item := range w {
+		if item != nil {
+			item(a.options)
+		}
+	}
+	return a
+}
+
+func (a *App) WithHook(init, close func(a *App)) WithOption {
+	return func(opts *Options) {
+		opts.InitHook = init
+		opts.CloseHook = close
+	}
+}
+
+func (a *App) Init() tea.Cmd {
+	if a.options.InitHook != nil {
+		a.options.InitHook(a)
+	}
+	if a.options.Ticker != nil {
+		go func() {
+			for range a.options.Ticker.Ticker() {
+				a.Rerender(false)
+			}
+		}()
+		if err := a.options.Ticker.Start(); err != nil {
+			panic("Fail to start ticker: " + err.Error())
+		}
+	}
+	if initPage, ok := a.page.(InitPage); ok {
+		return initPage.Init(a)
+	}
+	return nil
+}
+
+func (a *App) Close() {
+	if a.options.CloseHook != nil {
+		a.options.CloseHook(a)
+	}
+	if closer, ok := a.page.(Closer); ok {
+		_ = closer.Close()
+	}
+	if a.options.Ticker != nil {
+		_ = a.options.Ticker.Close()
+	}
+}
+
+func (a *App) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
+	// Make sure these keys always quit
+	switch msgWithType := msg.(type) {
+	case tea.KeyMsg:
+		var k = msgWithType.String()
+		if k != "q" && k != "Q" && k != "ctrl+c" {
+			break
+		}
+		if a.page != nil && a.page.IgnoreQuitKeyMsg(msgWithType) {
+			break
+		}
+		a.Close()
+		return a, tea.Quit
+	case tea.WindowSizeMsg:
+		a.windowHeight = msgWithType.Height
+		a.windowWidth = msgWithType.Width
+	}
+
+	page, cmd := a.page.Update(msg, a)
+	a.page = page
+	return a, cmd
+}
+
+func (a *App) View() string {
+	if a.WindowHeight() <= 0 || a.WindowWidth() <= 0 {
+		return ""
+	}
+
+	return a.page.View(a)
+}
+
+func (a *App) Run() error {
+	util.PrimaryColor = a.options.PrimaryColor
+
+	if a.page == nil {
+		a.main = NewMain(a, a.options)
+		a.startup = NewStartup(&a.options.StartupOptions, a.main)
+		if a.options.InitPage == nil {
+			a.options.InitPage = a.main
+			if a.options.EnableStartup {
+				a.options.InitPage = a.startup
+			}
+		}
+		a.page = a.options.InitPage
+	}
+	a.program = tea.ReplaceWithFoxfulRenderer(tea.NewProgram(a, a.options.TeaOptions...))
+	_, err := a.program.Run()
+	return err
+}
+
+func (a *App) Rerender(cleanScreen bool) {
+	if a.program == nil {
+		return
+	}
+	a.program.Send(a.RerenderCmd(cleanScreen))
+}
+
+func (a *App) RerenderCmd(cleanScreen bool) tea.Cmd {
+	return func() tea.Msg {
+		if cleanScreen {
+			a.program.Send(tea.ClearScreen())
+		}
+		return a.page.Msg()
+	}
+}
+
+func (a *App) Tick(d time.Duration) tea.Cmd {
+	return tea.Tick(d, func(time.Time) tea.Msg {
+		return a.page.Msg()
+	})
+}
+
+func (a *App) WindowWidth() int {
+	return a.windowWidth
+}
+
+func (a *App) WindowHeight() int {
+	return a.windowHeight
+}
+
+func (a *App) CurPage() Page {
+	return a.page
+}
+
+func (a *App) Startup() *StartupPage {
+	return a.startup
+}
+
+func (a *App) Main() *Main {
+	return a.main
+}
+
+func (a *App) MustMain() *Main {
+	if a.main != nil {
+		return a.main
+	}
+	panic("main page is empty")
+}
+
+func (a *App) MustStartup() *StartupPage {
+	if a.startup != nil {
+		return a.startup
+	}
+	panic("startup page is empty")
+}
diff --git a/vendor/github.com/anhoder/foxful-cli/model/component.go b/vendor/github.com/anhoder/foxful-cli/model/component.go
new file mode 100644
index 0000000..3fced3f
--- /dev/null
+++ b/vendor/github.com/anhoder/foxful-cli/model/component.go
@@ -0,0 +1,10 @@
+package model
+
+import (
+	tea "github.com/charmbracelet/bubbletea"
+)
+
+type Component interface {
+	Update(msg tea.Msg, a *App)
+	View(a *App, main *Main) (view string, lines int)
+}
diff --git a/vendor/github.com/anhoder/foxful-cli/model/controller.go b/vendor/github.com/anhoder/foxful-cli/model/controller.go
new file mode 100644
index 0000000..b07b03b
--- /dev/null
+++ b/vendor/github.com/anhoder/foxful-cli/model/controller.go
@@ -0,0 +1,13 @@
+package model
+
+import (
+	tea "github.com/charmbracelet/bubbletea"
+)
+
+type KeyboardController interface {
+	KeyMsgHandle(msg tea.KeyMsg, a *App) (stopPropagation bool, cmd tea.Cmd)
+}
+
+type MouseController interface {
+	MouseMsgHandle(msg tea.MouseMsg, a *App) (stopPropagation bool, cmd tea.Cmd)
+}
diff --git a/vendor/github.com/anhoder/foxful-cli/model/loading.go b/vendor/github.com/anhoder/foxful-cli/model/loading.go
new file mode 100644
index 0000000..0fa689d
--- /dev/null
+++ b/vendor/github.com/anhoder/foxful-cli/model/loading.go
@@ -0,0 +1,45 @@
+package model
+
+import (
+	"fmt"
+
+	"github.com/muesli/termenv"
+)
+
+type Loading struct {
+	main *Main
+}
+
+func NewLoading(m *Main) *Loading {
+	return &Loading{
+		main: m,
+	}
+}
+
+func (loading *Loading) start() {
+	termenv.DefaultOutput().MoveCursor(loading.main.menuTitleStartRow, 0)
+
+	var subTitle string
+	if loading.main.menuTitle.Subtitle != "" {
+		subTitle = loading.main.menuTitle.Subtitle + " " + loading.main.options.LoadingText
+	} else {
+		subTitle = loading.main.options.LoadingText
+	}
+	fmt.Print(loading.main.menuTitleView(loading.main.app, nil, &MenuItem{
+		Title:    loading.main.menuTitle.Title,
+		Subtitle: subTitle,
+	}))
+
+	termenv.DefaultOutput().MoveCursor(0, 0)
+}
+
+func (loading *Loading) complete() {
+	termenv.DefaultOutput().MoveCursor(loading.main.menuTitleStartRow, 0)
+
+	fmt.Print(loading.main.menuTitleView(loading.main.app, nil, &MenuItem{
+		Title:    loading.main.menuTitle.Title,
+		Subtitle: loading.main.menuTitle.Subtitle,
+	}))
+
+	termenv.DefaultOutput().MoveCursor(0, 0)
+}
diff --git a/vendor/github.com/anhoder/foxful-cli/model/local_search_menu.go b/vendor/github.com/anhoder/foxful-cli/model/local_search_menu.go
new file mode 100644
index 0000000..91630b5
--- /dev/null
+++ b/vendor/github.com/anhoder/foxful-cli/model/local_search_menu.go
@@ -0,0 +1,67 @@
+package model
+
+import (
+	"strings"
+)
+
+type searchRes struct {
+	item  MenuItem
+	index int
+}
+
+type LocalSearchMenu struct {
+	Menu
+	resItems []searchRes
+}
+
+func NewSearchMenu(originMenu Menu, search string) *LocalSearchMenu {
+	menu := &LocalSearchMenu{
+		Menu: originMenu,
+	}
+
+	for i, item := range originMenu.MenuViews() {
+		if strings.Contains(item.Title, search) || strings.Contains(item.Subtitle, search) {
+			menu.resItems = append(menu.resItems, searchRes{
+				item:  item,
+				index: i,
+			})
+		}
+	}
+	return menu
+}
+
+func (m *LocalSearchMenu) IsLocatable() bool {
+	return false
+}
+
+func (m *LocalSearchMenu) MenuViews() []MenuItem {
+	var items []MenuItem
+	for _, item := range m.resItems {
+		items = append(items, item.item)
+	}
+	return items
+}
+
+func (m *LocalSearchMenu) SubMenu(a *App, index int) Menu {
+	if index > len(m.resItems)-1 {
+		return nil
+	}
+
+	return m.Menu.SubMenu(a, m.resItems[index].index)
+}
+
+func (m *LocalSearchMenu) RealDataIndex(index int) int {
+	if index > len(m.resItems)-1 {
+		return 0
+	}
+
+	return m.resItems[index].index
+}
+
+func (m *LocalSearchMenu) BottomOutHook() Hook {
+	return nil
+}
+
+func (m *LocalSearchMenu) TopOutHook() Hook {
+	return nil
+}
diff --git a/vendor/github.com/anhoder/foxful-cli/model/main.go b/vendor/github.com/anhoder/foxful-cli/model/main.go
new file mode 100644
index 0000000..a1e9e37
--- /dev/null
+++ b/vendor/github.com/anhoder/foxful-cli/model/main.go
@@ -0,0 +1,847 @@
+package model
+
+import (
+	"fmt"
+	"math"
+	"strconv"
+	"strings"
+	"time"
+	"unicode/utf8"
+
+	"github.com/anhoder/foxful-cli/util"
+	"github.com/charmbracelet/bubbles/textinput"
+	tea "github.com/charmbracelet/bubbletea"
+	"github.com/mattn/go-runewidth"
+	"github.com/muesli/termenv"
+)
+
+type Main struct {
+	options *Options
+
+	app *App
+
+	doubleColumn bool
+
+	menuTitle            *MenuItem
+	menuTitleStartRow    int
+	menuTitleStartColumn int
+
+	menuStartRow    int
+	menuStartColumn int
+	menuBottomRow   int
+
+	menuCurPage  int
+	menuPageSize int
+
+	menuList      []MenuItem
+	menuStack     *util.Stack
+	selectedIndex int
+
+	// local search
+	inSearching bool
+	searchInput textinput.Model
+
+	menu Menu // current menu
+
+	components []Component
+
+	kbCtrls    []KeyboardController
+	mouseCtrls []MouseController
+}
+
+type tickMainMsg struct{}
+
+func NewMain(app *App, options *Options) (m *Main) {
+	var initMenuTitle *MenuItem
+	if options.InitMenuTitle != nil {
+		initMenuTitle = options.InitMenuTitle
+	} else {
+		initMenuTitle = &MenuItem{Title: options.AppName}
+	}
+
+	m = &Main{
+		app:          app,
+		options:      options,
+		menuTitle:    initMenuTitle,
+		menu:         options.MainMenu,
+		menuStack:    &util.Stack{},
+		menuCurPage:  1,
+		menuPageSize: 10,
+		searchInput:  textinput.New(),
+		components:   options.Components,
+	}
+	m.menuList = m.menu.MenuViews()
+	m.searchInput.Placeholder = " 搜索"
+	m.searchInput.Prompt = util.GetFocusedPrompt()
+	m.searchInput.TextStyle = util.GetPrimaryFontStyle()
+	m.searchInput.CharLimit = 32
+
+	return
+}
+
+func (m *Main) RefreshMenuList() {
+	m.menuList = m.menu.MenuViews()
+}
+
+func (m *Main) RefreshMenuTitle() {
+	m.menu.FormatMenuItem(m.menuTitle)
+}
+
+func (m *Main) IgnoreQuitKeyMsg(_ tea.KeyMsg) bool {
+	return m.inSearching
+}
+
+func (m *Main) Type() PageType {
+	return PtMain
+}
+
+func (m *Main) Msg() tea.Msg {
+	return tickMainMsg{}
+}
+
+func (m *Main) Init(a *App) tea.Cmd {
+	return a.Tick(time.Nanosecond)
+}
+
+func (m *Main) Update(msg tea.Msg, a *App) (Page, tea.Cmd) {
+	switch msg := msg.(type) {
+	case tea.KeyMsg:
+		return m.keyMsgHandle(msg, a)
+	case tea.MouseMsg:
+		return m.mouseMsgHandle(msg, a)
+	case tickMainMsg:
+		return m, nil
+	case tea.WindowSizeMsg:
+		m.doubleColumn = msg.Width >= 75 && m.options.DualColumn
+
+		// 菜单开始行、列
+		m.menuStartRow = msg.Height / 3
+		if !m.options.WhetherDisplayTitle && m.menuStartRow > 1 {
+			m.menuStartRow--
+		}
+		if m.doubleColumn {
+			m.menuStartColumn = (msg.Width - 60) / 2
+			m.menuBottomRow = m.menuStartRow + int(math.Ceil(float64(m.menuPageSize)/2)) - 1
+		} else {
+			m.menuStartColumn = (msg.Width - 20) / 2
+			m.menuBottomRow = m.menuStartRow + m.menuPageSize - 1
+		}
+
+		// 菜单标题开始行、列
+		m.menuTitleStartColumn = m.menuStartColumn
+		if m.options.WhetherDisplayTitle && m.menuStartRow > 2 {
+			if m.menuStartRow > 4 {
+				m.menuTitleStartRow = m.menuStartRow - 3
+			} else {
+				m.menuTitleStartRow = 2
+			}
+		} else if !m.options.WhetherDisplayTitle && m.menuStartRow > 1 {
+			if m.menuStartRow > 3 {
+				m.menuTitleStartRow = m.menuStartRow - 3
+			} else {
+				m.menuTitleStartRow = 2
+			}
+		}
+
+		// 组件更新
+		for _, component := range m.components {
+			if component == nil {
+				continue
+			}
+			component.Update(msg, a)
+		}
+		return m, a.RerenderCmd(true)
+	}
+
+	return m, nil
+}
+
+func (m *Main) View(a *App) string {
+	var windowHeight, windowWidth = a.WindowHeight(), a.WindowWidth()
+	if windowHeight <= 0 || windowWidth <= 0 {
+		return ""
+	}
+
+	var (
+		builder strings.Builder
+		top     int // 距离顶部的行数
+	)
+
+	// title
+	if m.options.WhetherDisplayTitle {
+		builder.WriteString(m.titleView(a, &top))
+	} else {
+		top++
+	}
+
+	if !m.options.HideMenu {
+		// menu title
+		builder.WriteString(m.menuTitleView(a, &top, nil))
+
+		// menu list
+		builder.WriteString(m.menuListView(a, &top))
+
+		// search input
+		builder.WriteString(m.searchInputView(a, &top))
+	} else {
+		builder.WriteString("\n\n\n")
+		top += 2
+	}
+
+	// components view
+	for _, component := range m.components {
+		if component == nil {
+			continue
+		}
+		var view, lines = component.View(a, m)
+		builder.WriteString(view)
+		top += lines
+	}
+
+	if top < windowHeight {
+		builder.WriteString(strings.Repeat("\n", windowHeight-top-1))
+	}
+
+	return builder.String()
+}
+
+func (m *Main) MenuTitleStartColumn() int {
+	return m.menuTitleStartColumn
+}
+
+func (m *Main) MenuTitleStartRow() int {
+	return m.menuTitleStartRow
+}
+
+func (m *Main) MenuStartColumn() int {
+	return m.menuStartColumn
+}
+
+func (m *Main) MenuStartRow() int {
+	return m.menuStartRow
+}
+
+// title view
+func (m *Main) titleView(a *App, top *int) string {
+	var (
+		titleBuilder strings.Builder
+		windowWidth  = a.WindowWidth()
+	)
+	titleLen := utf8.RuneCountInString(m.options.AppName) + 2
+	prefixLen := (windowWidth - titleLen) / 2
+	suffixLen := windowWidth - prefixLen - titleLen
+	if prefixLen > 0 {
+		titleBuilder.WriteString(strings.Repeat("─", prefixLen))
+	}
+	titleBuilder.WriteString(" ")
+	titleBuilder.WriteString(m.options.AppName)
+	titleBuilder.WriteString(" ")
+	if suffixLen > 0 {
+		titleBuilder.WriteString(strings.Repeat("─", suffixLen))
+	}
+
+	*top++
+
+	return util.SetFgStyle(titleBuilder.String(), util.GetPrimaryColor())
+}
+
+// menu title
+func (m *Main) menuTitleView(a *App, top *int, menuTitle *MenuItem) string {
+	var (
+		menuTitleBuilder strings.Builder
+		title            string
+		windowWidth      = a.WindowWidth()
+		maxLen           = windowWidth - m.menuTitleStartColumn
+	)
+
+	if menuTitle == nil {
+		menuTitle = m.menuTitle
+	}
+
+	realString := menuTitle.OriginString()
+	formatString := menuTitle.String()
+	if runewidth.StringWidth(realString) > maxLen {
+		var menuTmp = *menuTitle
+		titleLen := runewidth.StringWidth(menuTmp.Title)
+		subTitleLen := runewidth.StringWidth(menuTmp.Subtitle)
+		if titleLen >= maxLen-1 {
+			menuTmp.Title = runewidth.Truncate(menuTmp.Title, maxLen-1, "")
+			menuTmp.Subtitle = ""
+		} else if subTitleLen >= maxLen-titleLen-1 {
+			menuTmp.Subtitle = runewidth.Truncate(menuTmp.Subtitle, maxLen-titleLen-1, "")
+		}
+		title = menuTmp.String()
+	} else {
+		formatLen := runewidth.StringWidth(formatString)
+		realLen := runewidth.StringWidth(realString)
+		title = runewidth.FillRight(menuTitle.String(), maxLen+formatLen-realLen)
+	}
+
+	if top != nil && m.menuTitleStartRow-*top > 0 {
+		menuTitleBuilder.WriteString(strings.Repeat("\n", m.menuTitleStartRow-*top))
+	}
+	if m.menuTitleStartColumn > 0 {
+		menuTitleBuilder.WriteString(strings.Repeat(" ", m.menuTitleStartColumn))
+	}
+	menuTitleBuilder.WriteString(util.SetFgStyle(title, termenv.ANSIBrightGreen))
+
+	if top != nil {
+		*top = m.menuTitleStartRow
+	}
+
+	return menuTitleBuilder.String()
+}
+
+// 菜单列表
+func (m *Main) menuListView(a *App, top *int) string {
+	var menuListBuilder strings.Builder
+	menus := m.getCurPageMenus()
+	var lines, maxLines int
+	if m.doubleColumn {
+		lines = int(math.Ceil(float64(len(menus)) / 2))
+		maxLines = int(math.Ceil(float64(m.menuPageSize) / 2))
+	} else {
+		lines = len(menus)
+		maxLines = m.menuPageSize
+	}
+
+	if m.menuStartRow > *top {
+		menuListBuilder.WriteString(strings.Repeat("\n", m.menuStartRow-*top))
+	}
+
+	var str string
+	for i := 0; i < lines; i++ {
+		str = m.menuLineView(a, i)
+		menuListBuilder.WriteString(str)
+		menuListBuilder.WriteString("\n")
+	}
+
+	// 补全空白
+	if maxLines > lines {
+		var windowWidth = a.WindowWidth()
+		if windowWidth-m.menuStartColumn > 0 {
+			menuListBuilder.WriteString(strings.Repeat(" ", windowWidth-m.menuStartColumn))
+		}
+		menuListBuilder.WriteString(strings.Repeat("\n", maxLines-lines))
+	}
+
+	*top = m.menuBottomRow
+
+	return menuListBuilder.String()
+}
+
+// 菜单Line
+func (m *Main) menuLineView(a *App, line int) string {
+	var (
+		menuLineBuilder strings.Builder
+		index           int
+		windowWidth     = a.WindowWidth()
+	)
+	if m.doubleColumn {
+		index = line*2 + (m.menuCurPage-1)*m.menuPageSize
+	} else {
+		index = line + (m.menuCurPage-1)*m.menuPageSize
+	}
+	if index > len(m.menuList)-1 {
+		index = len(m.menuList) - 1
+	}
+	if m.menuStartColumn > 4 {
+		menuLineBuilder.WriteString(strings.Repeat(" ", m.menuStartColumn-4))
+	}
+	menuItemStr, menuItemLen := m.menuItemView(a, index)
+	menuLineBuilder.WriteString(menuItemStr)
+	if m.doubleColumn {
+		var secondMenuItemLen int
+		if index < len(m.menuList)-1 {
+			var secondMenuItemStr string
+			secondMenuItemStr, secondMenuItemLen = m.menuItemView(a, index+1)
+			menuLineBuilder.WriteString(secondMenuItemStr)
+		} else {
+			menuLineBuilder.WriteString("    ")
+			secondMenuItemLen = 4
+		}
+		if windowWidth-menuItemLen-secondMenuItemLen-m.menuStartColumn > 0 {
+			menuLineBuilder.WriteString(strings.Repeat(" ", windowWidth-menuItemLen-secondMenuItemLen-m.menuStartColumn))
+		}
+	}
+
+	return menuLineBuilder.String()
+}
+
+// 菜单Item
+func (m *Main) menuItemView(a *App, index int) (string, int) {
+	var (
+		menuItemBuilder strings.Builder
+		menuTitle       string
+		itemMaxLen      int
+		menuName        string
+		windowWidth     = a.WindowWidth()
+	)
+
+	isSelected := !m.inSearching && index == m.selectedIndex
+
+	if isSelected {
+		menuTitle = fmt.Sprintf(" => %d. %s", index, m.menuList[index].Title)
+	} else {
+		menuTitle = fmt.Sprintf("    %d. %s", index, m.menuList[index].Title)
+	}
+	if len(m.menuList[index].Subtitle) != 0 {
+		menuTitle += " "
+	}
+
+	if m.doubleColumn {
+		if windowWidth <= 88 {
+			itemMaxLen = (windowWidth - m.menuStartColumn - 4) / 2
+		} else {
+			if index%2 == 0 {
+				itemMaxLen = 44
+			} else {
+				itemMaxLen = windowWidth - m.menuStartColumn - 44
+			}
+		}
+	} else {
+		itemMaxLen = windowWidth - m.menuStartColumn
+	}
+
+	menuTitleLen := runewidth.StringWidth(menuTitle)
+	menuSubtitleLen := runewidth.StringWidth(m.menuList[index].Subtitle)
+
+	var tmp string
+	if menuTitleLen > itemMaxLen {
+		tmp = runewidth.Truncate(menuTitle, itemMaxLen, "")
+		tmp = runewidth.FillRight(tmp, itemMaxLen) // fix: 切割中文后缺少字符导致未对齐
+		if isSelected {
+			menuName = util.SetFgStyle(tmp, util.GetPrimaryColor())
+		} else {
+			menuName = util.SetNormalStyle(tmp)
+		}
+	} else if menuTitleLen+menuSubtitleLen > itemMaxLen {
+		var r = []rune(m.menuList[index].Subtitle)
+		r = append(r, []rune("   ")...)
+		var i int
+		if m.options.Ticker != nil {
+			i = int(m.options.Ticker.PassedTime().Milliseconds()/500) % len(r)
+		}
+		var s = make([]rune, 0, itemMaxLen-menuTitleLen)
+		for j := i; j < i+itemMaxLen-menuTitleLen; j++ {
+			s = append(s, r[j%len(r)])
+		}
+		tmp = runewidth.Truncate(string(s), itemMaxLen-menuTitleLen, "")
+		tmp = runewidth.FillRight(tmp, itemMaxLen-menuTitleLen)
+		if isSelected {
+			menuName = util.SetFgStyle(menuTitle, util.GetPrimaryColor()) + util.SetFgStyle(tmp, termenv.ANSIBrightBlack)
+		} else {
+			menuName = util.SetNormalStyle(menuTitle) + util.SetFgStyle(tmp, termenv.ANSIBrightBlack)
+		}
+	} else {
+		tmp = runewidth.FillRight(m.menuList[index].Subtitle, itemMaxLen-menuTitleLen)
+		if isSelected {
+			menuName = util.SetFgStyle(menuTitle, util.GetPrimaryColor()) + util.SetFgStyle(tmp, termenv.ANSIBrightBlack)
+		} else {
+			menuName = util.SetNormalStyle(menuTitle) + util.SetFgStyle(tmp, termenv.ANSIBrightBlack)
+		}
+	}
+
+	menuItemBuilder.WriteString(menuName)
+
+	return menuItemBuilder.String(), itemMaxLen
+}
+
+// 菜单搜索
+func (m *Main) searchInputView(app *App, top *int) string {
+	if !m.inSearching {
+		*top++
+		return "\n"
+	}
+
+	var (
+		builder     strings.Builder
+		windowWidth = app.WindowWidth()
+	)
+	builder.WriteString("\n")
+	*top++
+
+	inputs := []textinput.Model{
+		m.searchInput,
+	}
+
+	var startColumn int
+	if m.menuStartColumn > 2 {
+		startColumn = m.menuStartColumn - 2
+	}
+	for i, input := range inputs {
+		if startColumn > 0 {
+			builder.WriteString(strings.Repeat(" ", startColumn))
+		}
+
+		builder.WriteString(input.View())
+
+		var valueLen int
+		if input.Value() == "" {
+			valueLen = runewidth.StringWidth(input.Placeholder)
+		} else {
+			valueLen = runewidth.StringWidth(input.Value())
+		}
+		if spaceLen := windowWidth - startColumn - valueLen - 3; spaceLen > 0 {
+			builder.WriteString(strings.Repeat(" ", spaceLen))
+		}
+
+		*top++
+
+		if i < len(inputs)-1 {
+			builder.WriteString("\n\n")
+			*top++
+		}
+	}
+	return builder.String()
+}
+
+// 获取当前页的菜单
+func (m *Main) getCurPageMenus() []MenuItem {
+	start := (m.menuCurPage - 1) * m.menuPageSize
+	end := int(math.Min(float64(len(m.menuList)), float64(m.menuCurPage*m.menuPageSize)))
+
+	return m.menuList[start:end]
+}
+
+// key handle
+func (m *Main) keyMsgHandle(msg tea.KeyMsg, a *App) (Page, tea.Cmd) {
+	if m.inSearching {
+		switch msg.String() {
+		case "esc":
+			m.inSearching = false
+			m.searchInput.Blur()
+			m.searchInput.Reset()
+			return m, a.RerenderCmd(true)
+		case "enter":
+			m.searchMenuHandle()
+			return m, a.RerenderCmd(true)
+		}
+
+		var cmd tea.Cmd
+		m.searchInput, cmd = m.searchInput.Update(msg)
+
+		return m, tea.Batch(cmd)
+	}
+
+	key := msg.String()
+	switch key {
+	case "j", "J", "down":
+		m.MoveDown()
+	case "k", "K", "up":
+		m.MoveUp()
+	case "h", "H", "left":
+		m.MoveLeft()
+	case "l", "L", "right":
+		m.MoveRight()
+	case "0", "1", "2", "3", "4", "5", "6", "7", "8", "9":
+		num, _ := strconv.Atoi(key)
+		start := (m.menuCurPage - 1) * m.menuPageSize
+		if start+num < len(m.menuList) {
+			m.selectedIndex = start + num
+		}
+	case "g":
+		m.MoveTop()
+	case "G":
+		m.MoveBottom()
+	case "n", "N", "enter":
+		m.EnterMenu(nil, nil)
+	case "b", "B", "esc":
+		m.BackMenu()
+	case "r", "R":
+		return m, a.RerenderCmd(true)
+	case "/", "／":
+		if m.menu.IsSearchable() {
+			m.inSearching = true
+			m.searchInput.Focus()
+		}
+	default:
+		var lastCmd = a.Tick(time.Nanosecond)
+		for _, c := range m.kbCtrls {
+			stopPropagation, cmd := c.KeyMsgHandle(msg, a)
+			if cmd != nil {
+				lastCmd = cmd
+			}
+			if stopPropagation {
+				break
+			}
+		}
+		return m, lastCmd
+	}
+
+	return m, a.Tick(time.Nanosecond)
+}
+
+// mouse handle
+func (m *Main) mouseMsgHandle(msg tea.MouseMsg, a *App) (Page, tea.Cmd) {
+	var lastCmd = a.Tick(time.Nanosecond)
+	for _, c := range m.mouseCtrls {
+		stopPropagation, cmd := c.MouseMsgHandle(msg, a)
+		if cmd != nil {
+			lastCmd = cmd
+		}
+		if stopPropagation {
+			break
+		}
+	}
+	return m, lastCmd
+}
+
+func (m *Main) searchMenuHandle() {
+	m.inSearching = false
+	m.EnterMenu(NewSearchMenu(m.menu, m.searchInput.Value()), &MenuItem{Title: "搜索结果", Subtitle: m.searchInput.Value()})
+	m.searchInput.Blur()
+	m.searchInput.Reset()
+}
+
+type menuStackItem struct {
+	menuList      []MenuItem
+	selectedIndex int
+	menuCurPage   int
+	menuTitle     *MenuItem
+	menu          Menu
+}
+
+func (m *Main) MoveUp() {
+	topHook := m.menu.TopOutHook()
+	if m.doubleColumn {
+		if m.selectedIndex-2 < 0 && topHook != nil {
+			loading := NewLoading(m)
+			loading.start()
+			if res := topHook(m); !res {
+				loading.complete()
+				return
+			}
+			// 更新菜单UI
+			m.menuList = m.menu.MenuViews()
+			loading.complete()
+		}
+		if m.selectedIndex-2 < 0 {
+			return
+		}
+		m.selectedIndex -= 2
+	} else {
+		if m.selectedIndex-1 < 0 && topHook != nil {
+			loading := NewLoading(m)
+			loading.start()
+			if res := topHook(m); !res {
+				loading.complete()
+				return
+			}
+			m.menuList = m.menu.MenuViews()
+			loading.complete()
+		}
+		if m.selectedIndex-1 < 0 {
+			return
+		}
+		m.selectedIndex--
+	}
+	if m.selectedIndex < (m.menuCurPage-1)*m.menuPageSize {
+		m.PrePage()
+	}
+}
+
+func (m *Main) MoveDown() {
+	bottomHook := m.menu.BottomOutHook()
+	if m.doubleColumn {
+		if m.selectedIndex+2 > len(m.menuList)-1 && bottomHook != nil {
+			loading := NewLoading(m)
+			loading.start()
+			if res := bottomHook(m); !res {
+				loading.complete()
+				return
+			}
+			m.menuList = m.menu.MenuViews()
+			loading.complete()
+		}
+		if m.selectedIndex+2 > len(m.menuList)-1 {
+			return
+		}
+		m.selectedIndex += 2
+	} else {
+		if m.selectedIndex+1 > len(m.menuList)-1 && bottomHook != nil {
+			loading := NewLoading(m)
+			loading.start()
+			if res := bottomHook(m); !res {
+				loading.complete()
+				return
+			}
+			m.menuList = m.menu.MenuViews()
+			loading.complete()
+		}
+		if m.selectedIndex+1 > len(m.menuList)-1 {
+			return
+		}
+		m.selectedIndex++
+	}
+	if m.selectedIndex >= m.menuCurPage*m.menuPageSize {
+		m.NextPage()
+	}
+}
+
+func (m *Main) MoveLeft() {
+	if !m.doubleColumn || m.selectedIndex%2 == 0 || m.selectedIndex-1 < 0 {
+		return
+	}
+	m.selectedIndex--
+}
+
+func (m *Main) MoveRight() {
+	if !m.doubleColumn || m.selectedIndex%2 != 0 {
+		return
+	}
+	if bottomHook := m.menu.BottomOutHook(); m.selectedIndex >= len(m.menuList)-1 && bottomHook != nil {
+		loading := NewLoading(m)
+		loading.start()
+		if res := bottomHook(m); !res {
+			loading.complete()
+			return
+		}
+		m.menuList = m.menu.MenuViews()
+		loading.complete()
+	}
+	if m.selectedIndex >= len(m.menuList)-1 {
+		return
+	}
+	m.selectedIndex++
+}
+
+func (m *Main) MoveTop() {
+	if m.doubleColumn {
+		m.selectedIndex = m.selectedIndex % 2
+	} else {
+		m.selectedIndex = 0
+	}
+	m.menuCurPage = 1
+}
+
+func (m *Main) MoveBottom() {
+	if m.doubleColumn && len(m.menuList)%2 == 0 {
+		m.selectedIndex = len(m.menuList) + (m.selectedIndex%2 - 2)
+	} else if m.doubleColumn && m.selectedIndex%2 != 0 {
+		m.selectedIndex = len(m.menuList) - 2
+	} else {
+		m.selectedIndex = len(m.menuList) - 1
+	}
+	m.menuCurPage = int(math.Ceil(float64(len(m.menuList)) / float64(m.menuPageSize)))
+	if m.doubleColumn && m.selectedIndex%2 != 0 && len(m.menuList)%m.menuPageSize == 1 {
+		m.menuCurPage -= 1
+	}
+}
+
+func (m *Main) PrePage() {
+	if prePageHook := m.menu.BeforePrePageHook(); prePageHook != nil {
+		loading := NewLoading(m)
+		loading.start()
+		if res := prePageHook(m); !res {
+			loading.complete()
+			return
+		}
+		loading.complete()
+	}
+
+	if m.menuCurPage <= 1 {
+		return
+	}
+	m.menuCurPage--
+}
+
+func (m *Main) NextPage() {
+	if nextPageHook := m.menu.BeforeNextPageHook(); nextPageHook != nil {
+		loading := NewLoading(m)
+		loading.start()
+		if res := nextPageHook(m); !res {
+			loading.complete()
+			return
+		}
+		loading.complete()
+	}
+	if m.menuCurPage >= int(math.Ceil(float64(len(m.menuList))/float64(m.menuPageSize))) {
+		return
+	}
+
+	m.menuCurPage++
+}
+
+func (m *Main) EnterMenu(newMenu Menu, newTitle *MenuItem) {
+	if (newMenu == nil || newTitle == nil) && m.selectedIndex >= len(m.menuList) {
+		return
+	}
+
+	if newMenu == nil {
+		newMenu = m.menu.SubMenu(m.app, m.selectedIndex)
+	}
+	if newTitle == nil {
+		newTitle = &m.menuList[m.selectedIndex]
+	}
+
+	stackItem := &menuStackItem{
+		menuList:      m.menuList,
+		selectedIndex: m.selectedIndex,
+		menuCurPage:   m.menuCurPage,
+		menuTitle:     m.menuTitle,
+		menu:          m.menu,
+	}
+	m.menuStack.Push(stackItem)
+
+	if newMenu == nil {
+		m.menuStack.Pop()
+		return
+	}
+
+	if enterMenuHook := newMenu.BeforeEnterMenuHook(); enterMenuHook != nil {
+		loading := NewLoading(m)
+		loading.start()
+		if res := enterMenuHook(m); !res {
+			loading.complete()
+			m.menuStack.Pop() // 压入的重新弹出
+			return
+		}
+
+		loading.complete()
+	}
+
+	if newMenu != nil {
+		newMenu.FormatMenuItem(newTitle)
+	}
+
+	menuList := newMenu.MenuViews()
+
+	m.menu = newMenu
+	m.menuList = menuList
+	m.menuTitle = newTitle
+	m.selectedIndex = 0
+	m.menuCurPage = 1
+}
+
+func (m *Main) BackMenu() {
+
+	if m.menuStack.Len() <= 0 {
+		return
+	}
+
+	stackItem := m.menuStack.Pop()
+	if backMenuHook := m.menu.BeforeBackMenuHook(); backMenuHook != nil {
+		loading := NewLoading(m)
+		loading.start()
+		if res := backMenuHook(m); !res {
+			loading.complete()
+			m.menuStack.Push(stackItem) // 弹出的重新压入
+			return
+		}
+		loading.complete()
+	}
+	m.menu.FormatMenuItem(m.menuTitle) // 重新格式化
+
+	stackMenu, ok := stackItem.(*menuStackItem)
+	if !ok {
+		return
+	}
+
+	m.menuList = stackMenu.menuList
+	m.menu = stackMenu.menu
+	m.menuTitle = stackMenu.menuTitle
+	m.menu.FormatMenuItem(m.menuTitle)
+	m.selectedIndex = stackMenu.selectedIndex
+	m.menuCurPage = stackMenu.menuCurPage
+}
diff --git a/vendor/github.com/anhoder/foxful-cli/model/menu.go b/vendor/github.com/anhoder/foxful-cli/model/menu.go
new file mode 100644
index 0000000..f6b1517
--- /dev/null
+++ b/vendor/github.com/anhoder/foxful-cli/model/menu.go
@@ -0,0 +1,177 @@
+package model
+
+import (
+	"time"
+
+	"github.com/anhoder/foxful-cli/util"
+	"github.com/muesli/termenv"
+)
+
+type Hook func(main *Main) bool
+
+type MenuItem struct {
+	Title    string
+	Subtitle string
+}
+
+func (item *MenuItem) OriginString() string {
+	if item.Subtitle == "" {
+		return item.Title
+	}
+	return item.Title + " " + item.Subtitle
+}
+
+func (item *MenuItem) String() string {
+	if item.Subtitle == "" {
+		return item.Title
+	}
+	return item.Title + " " + util.SetFgStyle(item.Subtitle, termenv.ANSIBrightBlack)
+}
+
+// Menu menu interface
+type Menu interface {
+	// IsSearchable is the current menu searchable
+	IsSearchable() bool
+
+	// RealDataIndex index of real data
+	RealDataIndex(index int) int
+
+	// GetMenuKey Menu unique key
+	GetMenuKey() string
+
+	// MenuViews get submenu View
+	MenuViews() []MenuItem
+
+	// FormatMenuItem format before entering the menu
+	FormatMenuItem(item *MenuItem)
+
+	// SubMenu obtain menu by index
+	SubMenu(app *App, index int) Menu
+
+	// BeforePrePageHook Hook before turn to previous page
+	BeforePrePageHook() Hook
+
+	// BeforeNextPageHook Hook before turn to next page
+	BeforeNextPageHook() Hook
+
+	// BeforeEnterMenuHook Hook before enter menu
+	BeforeEnterMenuHook() Hook
+
+	// BeforeBackMenuHook Hook before back menu
+	BeforeBackMenuHook() Hook
+
+	// BottomOutHook Hook while bottom out
+	BottomOutHook() Hook
+
+	// TopOutHook Hook while top out
+	TopOutHook() Hook
+}
+
+type DefaultMenu struct {
+}
+
+func (e *DefaultMenu) IsSearchable() bool {
+	return false
+}
+
+func (e *DefaultMenu) RealDataIndex(index int) int {
+	return index
+}
+
+func (e *DefaultMenu) GetMenuKey() string {
+	panic("implement me")
+}
+
+func (e *DefaultMenu) MenuViews() []MenuItem {
+	return nil
+}
+
+func (e *DefaultMenu) FormatMenuItem(_ *MenuItem) {
+}
+
+func (e *DefaultMenu) SubMenu(_ *App, _ int) Menu {
+	return nil
+}
+
+func (e *DefaultMenu) BeforePrePageHook() Hook {
+	return nil
+}
+
+func (e *DefaultMenu) BeforeNextPageHook() Hook {
+	return nil
+}
+
+func (e *DefaultMenu) BeforeEnterMenuHook() Hook {
+	return nil
+}
+
+func (e *DefaultMenu) BeforeBackMenuHook() Hook {
+	return nil
+}
+
+func (e *DefaultMenu) BottomOutHook() Hook {
+	return nil
+}
+
+func (e *DefaultMenu) TopOutHook() Hook {
+	return nil
+}
+
+type Closer interface {
+	Close() error
+}
+
+type Ticker interface {
+	Closer
+	Start() error
+	Ticker() <-chan time.Time
+	PassedTime() time.Duration
+}
+
+type defaultTicker struct {
+	startTime time.Time
+	t         time.Time
+	ticker    *time.Ticker
+	stop      chan struct{}
+	pipeline  chan time.Time
+}
+
+func DefaultTicker(duration time.Duration) Ticker {
+	return &defaultTicker{
+		ticker:   time.NewTicker(duration),
+		stop:     make(chan struct{}),
+		pipeline: make(chan time.Time),
+	}
+}
+
+func (d *defaultTicker) Start() error {
+	d.startTime = time.Now()
+	go func() {
+		for {
+			select {
+			case <-d.stop:
+				break
+			case d.t = <-d.ticker.C:
+				select {
+				case d.pipeline <- d.t:
+				default:
+				}
+			}
+		}
+	}()
+	return nil
+}
+
+func (d *defaultTicker) Ticker() <-chan time.Time {
+	return d.pipeline
+}
+
+func (d *defaultTicker) PassedTime() time.Duration {
+	return d.t.Sub(d.startTime)
+}
+
+func (d *defaultTicker) Close() error {
+	close(d.stop)
+	d.ticker.Stop()
+	return nil
+}
diff --git a/vendor/github.com/anhoder/foxful-cli/model/options.go b/vendor/github.com/anhoder/foxful-cli/model/options.go
new file mode 100644
index 0000000..5f5599b
--- /dev/null
+++ b/vendor/github.com/anhoder/foxful-cli/model/options.go
@@ -0,0 +1,65 @@
+package model
+
+import (
+	"time"
+
+	"github.com/anhoder/foxful-cli/util"
+	tea "github.com/charmbracelet/bubbletea"
+)
+
+type Options struct {
+	StartupOptions
+	ProgressOptions
+
+	AppName             string
+	WhetherDisplayTitle bool
+	LoadingText         string
+	PrimaryColor        string
+	DualColumn          bool // The menu list is displayed as a dual column
+	HideMenu            bool
+
+	TeaOptions []tea.ProgramOption // Tea program options
+
+	InitPage      InitPage
+	InitMenuTitle *MenuItem
+	Ticker        Ticker      // Ticker for render
+	MainMenu      Menu        // Entry menu of app
+	Components    []Component // Custom Extra components
+
+	InitHook  func(a *App)
+	CloseHook func(a *App)
+}
+
+type StartupOptions struct {
+	EnableStartup     bool
+	LoadingDuration   time.Duration
+	TickDuration      time.Duration
+	ProgressOutBounce bool
+	Welcome           string
+}
+
+func DefaultOptions() *Options {
+	return &Options{
+		StartupOptions: StartupOptions{
+			EnableStartup:     true,
+			LoadingDuration:   time.Second * 2,
+			TickDuration:      time.Millisecond * 16,
+			ProgressOutBounce: true,
+			Welcome:           util.PkgName,
+		},
+		ProgressOptions: ProgressOptions{
+			FirstEmptyChar: '.',
+			EmptyChar:      '.',
+			LastEmptyChar:  '.',
+			FirstFullChar:  '#',
+			FullChar:       '#',
+			LastFullChar:   '#',
+		},
+		WhetherDisplayTitle: true,
+		DualColumn:          true,
+		AppName:             util.PkgName,
+		LoadingText:         util.LoadingText,
+		PrimaryColor:        util.RandomColor,
+		MainMenu:            &DefaultMenu{},
+	}
+}
diff --git a/vendor/github.com/anhoder/foxful-cli/model/page.go b/vendor/github.com/anhoder/foxful-cli/model/page.go
new file mode 100644
index 0000000..41bddc3
--- /dev/null
+++ b/vendor/github.com/anhoder/foxful-cli/model/page.go
@@ -0,0 +1,25 @@
+package model
+
+import (
+	tea "github.com/charmbracelet/bubbletea"
+)
+
+type Page interface {
+	IgnoreQuitKeyMsg(msg tea.KeyMsg) bool
+	Type() PageType
+	Update(msg tea.Msg, a *App) (Page, tea.Cmd)
+	View(a *App) string
+	Msg() tea.Msg
+}
+
+type InitPage interface {
+	Page
+	Init(a *App) tea.Cmd
+}
+
+type PageType string
+
+const (
+	PtStartup PageType = "startup"
+	PtMain    PageType = "main"
+)
diff --git a/vendor/github.com/anhoder/foxful-cli/model/progress.go b/vendor/github.com/anhoder/foxful-cli/model/progress.go
new file mode 100644
index 0000000..3448d2d
--- /dev/null
+++ b/vendor/github.com/anhoder/foxful-cli/model/progress.go
@@ -0,0 +1,49 @@
+package model
+
+import (
+	"strings"
+
+	"github.com/anhoder/foxful-cli/util"
+	"github.com/muesli/termenv"
+)
+
+type ProgressOptions struct {
+	FirstEmptyChar rune
+	EmptyChar      rune
+	LastEmptyChar  rune
+	FirstFullChar  rune
+	FullChar       rune
+	LastFullChar   rune
+}
+
+func Progress(options *ProgressOptions, width, fullSize int, progressRamp []string) string {
+	var fullCells strings.Builder
+	for i := 0; i < fullSize && i < len(progressRamp); i++ {
+		if i == 0 {
+			fullCells.WriteString(termenv.String(string(options.FirstFullChar)).Foreground(util.TermProfile.Color(progressRamp[i])).String())
+		} else if i >= width-1 {
+			fullCells.WriteString(termenv.String(string(options.LastFullChar)).Foreground(util.TermProfile.Color(progressRamp[i])).String())
+		} else {
+			fullCells.WriteString(termenv.String(string(options.FullChar)).Foreground(util.TermProfile.Color(progressRamp[i])).String())
+		}
+	}
+
+	var (
+		emptySize  = width - fullSize
+		emptyCells strings.Builder
+	)
+	if emptySize > 0 {
+		if fullSize == 0 {
+			emptyCells.WriteRune(options.FirstEmptyChar)
+			emptySize--
+		}
+		emptySize--
+		if emptySize > 0 {
+			emptyCells.WriteString(strings.Repeat(string(options.EmptyChar), emptySize))
+		}
+		if fullSize < width {
+			emptyCells.WriteRune(options.LastEmptyChar)
+		}
+	}
+	return fullCells.String() + util.SetFgStyle(emptyCells.String(), termenv.ANSIBrightBlack)
+}
diff --git a/vendor/github.com/anhoder/foxful-cli/model/startup.go b/vendor/github.com/anhoder/foxful-cli/model/startup.go
new file mode 100644
index 0000000..5a33e1d
--- /dev/null
+++ b/vendor/github.com/anhoder/foxful-cli/model/startup.go
@@ -0,0 +1,170 @@
+package model
+
+import (
+	"fmt"
+	"math"
+	"strings"
+	"time"
+	"unicode/utf8"
+
+	"github.com/anhoder/foxful-cli/util"
+	tea "github.com/charmbracelet/bubbletea"
+	"github.com/fogleman/ease"
+	"github.com/muesli/termenv"
+)
+
+var (
+	progressRamp       []string
+	progressLastWidth  float64
+	progressStartColor string
+	progressEndColor   string
+)
+
+type tickStartupMsg struct{}
+
+type StartupPage struct {
+	options *StartupOptions
+
+	loadedDuration time.Duration
+	loadedPercent  float64
+	loaded         bool
+	nextPage       Page
+}
+
+func NewStartup(options *StartupOptions, nextPage Page) *StartupPage {
+	return &StartupPage{
+		options:  options,
+		nextPage: nextPage,
+	}
+}
+
+func (s *StartupPage) Init(a *App) tea.Cmd {
+	return a.Tick(time.Nanosecond)
+}
+
+func (s *StartupPage) Msg() tea.Msg {
+	return tickStartupMsg{}
+}
+
+func (s *StartupPage) IgnoreQuitKeyMsg(_ tea.KeyMsg) bool {
+	return false
+}
+
+func (s *StartupPage) Type() PageType {
+	return PtStartup
+}
+
+func (s *StartupPage) Update(msg tea.Msg, a *App) (Page, tea.Cmd) {
+	switch msg.(type) {
+	case tickStartupMsg:
+		if s.loadedDuration >= s.options.LoadingDuration {
+			s.loaded = true
+			return s.nextPage, a.RerenderCmd(true)
+		}
+		s.loadedDuration += s.options.TickDuration
+		s.loadedPercent = float64(s.loadedDuration) / float64(s.options.LoadingDuration)
+		if s.options.ProgressOutBounce {
+			s.loadedPercent = ease.OutBounce(s.loadedPercent)
+		}
+		return s, a.Tick(s.options.TickDuration)
+	case tea.WindowSizeMsg:
+		s.nextPage.Update(msg, a)
+	}
+	return s, nil
+}
+
+func (s *StartupPage) View(a *App) string {
+	var windowHeight, windowWidth = a.WindowHeight(), a.WindowWidth()
+	if windowWidth <= 0 || windowHeight <= 0 {
+		return ""
+	}
+
+	blankLine := 1
+	tipsHeight := 1
+	progressHeight := 1
+	height := util.AsciiHeight + blankLine + tipsHeight + blankLine + progressHeight
+	var top, bottom int
+	if windowHeight-height > 0 {
+		top = (windowHeight - height) / 2
+	}
+	if windowHeight-top-height > 0 {
+		bottom = windowHeight - top - height
+	}
+
+	var uiBuilder strings.Builder
+	if top > 1 {
+		uiBuilder.WriteString(strings.Repeat("\n", top-1))
+	}
+	uiBuilder.WriteString(s.logoView(a))
+	uiBuilder.WriteString("\n")
+	if top != 0 && bottom != 0 {
+		uiBuilder.WriteString("\n")
+	}
+	uiBuilder.WriteString(s.tipsView(a))
+	uiBuilder.WriteString("\n")
+	if top != 0 && bottom != 0 {
+		uiBuilder.WriteString("\n")
+	}
+	uiBuilder.WriteString(s.progressView(a))
+	uiBuilder.WriteString(strings.Repeat("\n", bottom))
+
+	return uiBuilder.String()
+}
+
+func (s *StartupPage) logoView(a *App) string {
+	var windowHeight, windowWidth = a.WindowHeight(), a.WindowWidth()
+	if windowWidth <= 0 || windowHeight <= 0 {
+		return ""
+	}
+
+	originLogo := util.GetAlphaAscii(s.options.Welcome)
+	var logoWidth int
+	if logoArr := strings.Split(originLogo, "\n"); len(logoArr) > 1 {
+		logoWidth = utf8.RuneCountInString(logoArr[1])
+	}
+
+	var left int
+	if windowWidth-logoWidth > 0 {
+		left = (windowWidth - logoWidth) / 2
+	}
+
+	var logoBuilder strings.Builder
+	leftSpace := strings.Repeat(" ", left)
+	lines := strings.Split(originLogo, "\n")
+	for _, line := range lines {
+		logoBuilder.WriteString(leftSpace)
+		logoBuilder.WriteString(line)
+		logoBuilder.WriteString("\n")
+	}
+	return util.SetFgStyle(logoBuilder.String(), util.GetPrimaryColor())
+}
+
+func (s *StartupPage) tipsView(a *App) string {
+	example := "Enter after 11.1 seconds..."
+	var (
+		left        int
+		windowWidth = a.WindowWidth()
+	)
+	if windowWidth-len(example) > 0 {
+		left = (windowWidth - len(example)) / 2
+	}
+	tips := fmt.Sprintf("%sEnter after %.1f seconds...",
+		strings.Repeat(" ", left),
+		float64(s.options.LoadingDuration-s.loadedDuration)/float64(time.Second))
+
+	return util.SetFgStyle(tips, termenv.ANSIBrightBlack)
+}
+
+func (s *StartupPage) progressView(a *App) string {
+	var width = float64(a.WindowWidth())
+
+	if progressStartColor == "" || progressEndColor == "" {
+		progressStartColor, progressEndColor = util.GetRandomRgbColor(true)
+	}
+	if width != progressLastWidth {
+		progressRamp = util.MakeRamp(progressStartColor, progressEndColor, width)
+		progressLastWidth = width
+	}
+
+	return Progress(&a.options.ProgressOptions, int(width), int(math.Round(width*s.loadedPercent)), progressRamp)
+}
diff --git a/vendor/github.com/anhoder/foxful-cli/util/alpha_ascii.go b/vendor/github.com/anhoder/foxful-cli/util/alpha_ascii.go
new file mode 100644
index 0000000..197b302
--- /dev/null
+++ b/vendor/github.com/anhoder/foxful-cli/util/alpha_ascii.go
@@ -0,0 +1,571 @@
+package util
+
+import (
+	"strings"
+)
+
+var alphaAscii = map[rune]string{
+	// blank
+	' ': `
+        
+        
+        
+        
+        
+        
+        
+`,
+	'A': `
+ █████╗ 
+██╔══██╗
+███████║
+██╔══██║
+██║  ██║
+╚═╝  ╚═╝
+        
+`,
+	'B': `
+██████╗ 
+██╔══██╗
+██████╔╝
+██╔══██╗
+██████╔╝
+╚═════╝ 
+        
+`,
+	'C': `
+ ██████╗
+██╔════╝
+██║     
+██║     
+╚██████╗
+ ╚═════╝
+        
+`,
+	'D': `
+██████╗ 
+██╔══██╗
+██║  ██║
+██║  ██║
+██████╔╝
+╚═════╝ 
+        
+`,
+	'E': `
+███████╗
+██╔════╝
+█████╗  
+██╔══╝  
+███████╗
+╚══════╝
+        
+`,
+	'F': `
+███████╗
+██╔════╝
+█████╗  
+██╔══╝  
+██║     
+╚═╝     
+        
+`,
+	'G': `
+ ██████╗ 
+██╔════╝ 
+██║  ███╗
+██║   ██║
+╚██████╔╝
+ ╚═════╝ 
+         
+`,
+	'H': `
+██╗  ██╗
+██║  ██║
+███████║
+██╔══██║
+██║  ██║
+╚═╝  ╚═╝
+        
+`,
+	'I': `
+██╗
+██║
+██║
+██║
+██║
+╚═╝
+   
+`,
+	'J': `
+██╗     
+██║     
+██║     
+██   ██║
+╚█████╔╝
+ ╚════╝ 
+        
+`,
+	'K': `
+██╗  ██╗
+██║ ██╔╝
+█████╔╝ 
+██╔═██╗ 
+██║  ██╗
+╚═╝  ╚═╝
+        
+`,
+	'L': `
+██╗     
+██║     
+██║     
+██║     
+███████╗
+╚══════╝
+        
+`,
+	'M': `
+███╗   ███╗
+████╗ ████║
+██╔████╔██║
+██║╚██╔╝██║
+██║ ╚═╝ ██║
+╚═╝     ╚═╝
+           
+`,
+	'N': `
+███╗   ██╗
+████╗  ██║
+██╔██╗ ██║
+██║╚██╗██║
+██║ ╚████║
+╚═╝  ╚═══╝
+          
+`,
+	'O': `
+ ██████╗ 
+██╔═══██╗
+██║   ██║
+██║   ██║
+╚██████╔╝
+ ╚═════╝ 
+         
+`,
+	'P': `
+██████╗ 
+██╔══██╗
+██████╔╝
+██╔═══╝ 
+██║     
+╚═╝     
+        
+`,
+	'Q': `
+ ██████╗ 
+██╔═══██╗
+██║   ██║
+██║▄▄ ██║
+╚██████╔╝
+ ╚══▀▀═╝ 
+         
+`,
+	'R': `
+██████╗ 
+██╔══██╗
+██████╔╝
+██╔══██╗
+██║  ██║
+╚═╝  ╚═╝
+        
+`,
+	'S': `
+███████╗
+██╔════╝
+███████╗
+╚════██║
+███████║
+╚══════╝
+        
+`,
+	'T': `
+████████╗
+╚══██╔══╝
+   ██║   
+   ██║   
+   ██║   
+   ╚═╝   
+         
+`,
+	'U': `
+██╗   ██╗
+██║   ██║
+██║   ██║
+██║   ██║
+╚██████╔╝
+ ╚═════╝ 
+         
+`,
+	'V': `
+██╗   ██╗
+██║   ██║
+██║   ██║
+╚██╗ ██╔╝
+ ╚████╔╝ 
+  ╚═══╝  
+         
+`,
+	'W': `
+██╗    ██╗
+██║    ██║
+██║ █╗ ██║
+██║███╗██║
+╚███╔███╔╝
+ ╚══╝╚══╝ 
+          
+`,
+	'X': `
+██╗  ██╗
+╚██╗██╔╝
+ ╚███╔╝ 
+ ██╔██╗ 
+██╔╝ ██╗
+╚═╝  ╚═╝
+        
+`,
+	'Y': `
+██╗   ██╗
+╚██╗ ██╔╝
+ ╚████╔╝ 
+  ╚██╔╝  
+   ██║   
+   ╚═╝   
+         
+`,
+	'Z': `
+███████╗
+╚══███╔╝
+  ███╔╝ 
+ ███╔╝  
+███████╗
+╚══════╝
+        
+`,
+	'0': `
+ ██████╗ 
+██╔═████╗
+██║██╔██║
+████╔╝██║
+╚██████╔╝
+ ╚═════╝ 
+         
+`,
+	'1': `
+ ██╗
+███║
+╚██║
+ ██║
+ ██║
+ ╚═╝
+    
+`,
+	'2': `
+██████╗ 
+╚════██╗
+ █████╔╝
+██╔═══╝ 
+███████╗
+╚══════╝
+        
+`,
+	'3': `
+██████╗ 
+╚════██╗
+ █████╔╝
+ ╚═══██╗
+██████╔╝
+╚═════╝ 
+        
+`,
+	'4': `
+██╗  ██╗
+██║  ██║
+███████║
+╚════██║
+     ██║
+     ╚═╝
+        
+`,
+	'5': `
+███████╗
+██╔════╝
+███████╗
+╚════██║
+███████║
+╚══════╝
+        
+`,
+	'6': `
+ ██████╗ 
+██╔════╝ 
+███████╗ 
+██╔═══██╗
+╚██████╔╝
+ ╚═════╝ 
+         
+`,
+	'7': `
+███████╗
+╚════██║
+    ██╔╝
+   ██╔╝ 
+   ██║  
+   ╚═╝  
+        
+`,
+	'8': `
+ █████╗ 
+██╔══██╗
+╚█████╔╝
+██╔══██╗
+╚█████╔╝
+ ╚════╝ 
+        
+`,
+	'9': `
+ █████╗ 
+██╔══██╗
+╚██████║
+ ╚═══██║
+ █████╔╝
+ ╚════╝ 
+        
+`,
+	'!': `
+██╗
+██║
+██║
+╚═╝
+██╗
+╚═╝
+   
+`,
+	'@': `
+ ██████╗ 
+██╔═══██╗
+██║██╗██║
+██║██║██║
+╚█║████╔╝
+ ╚╝╚═══╝ 
+         
+`,
+	'#': `
+ ██╗ ██╗ 
+████████╗
+╚██╔═██╔╝
+████████╗
+╚██╔═██╔╝
+ ╚═╝ ╚═╝ 
+         
+`,
+	'$': `
+▄▄███▄▄ 
+██╔════╝
+███████╗
+╚════██║
+███████║
+╚═▀▀▀══╝
+        
+`,
+	'%': `
+██╗ ██╗
+╚═╝██╔╝
+  ██╔╝ 
+ ██╔╝  
+██╔╝██╗
+╚═╝ ╚═╝
+       
+`,
+	'^': `
+ ███╗ 
+██╔██╗
+╚═╝╚═╝
+      
+      
+      
+      
+`,
+	'&': `
+   ██╗   
+   ██║   
+████████╗
+██╔═██╔═╝
+██████║  
+╚═════╝  
+         
+`,
+	'*': `
+▄ ██╗▄
+ ████╗
+▀╚██╔▀
+  ╚═╝ 
+      
+      
+      
+`,
+	'(': `
+ ██╗
+██╔╝
+██║ 
+██║ 
+╚██╗
+ ╚═╝
+    
+`,
+	')': `
+██╗ 
+╚██╗
+ ██║
+ ██║
+██╔╝
+╚═╝ 
+    
+`,
+	'-': `
+      
+█████╗
+╚════╝
+      
+      
+      
+      
+`,
+	'_': `
+        
+        
+        
+███████╗
+╚══════╝
+        
+        
+`,
+	'[': `
+███╗
+██╔╝
+██║
+██║
+███╗
+╚══╝
+    
+`,
+	']': `
+███╗
+╚██║
+ ██║
+ ██║
+███║
+╚══╝
+    
+`,
+	';': `
+██╗
+╚═╝
+▄█╗
+▀═╝
+   
+   
+   
+`,
+	':': `
+██╗
+╚═╝
+██╗
+╚═╝
+   
+   
+   
+`,
+	',': `
+   
+   
+   
+▄█╗
+╚═╝
+   
+   
+`,
+	'.': `
+   
+   
+   
+██╗
+╚═╝
+   
+   
+`,
+	'<': `
+  ██╗
+ ██╔╝
+██╔╝ 
+╚██╗ 
+ ╚██╗
+  ╚═╝
+     
+`,
+	'>': `
+██╗  
+╚██╗ 
+ ╚██╗
+ ██╔╝
+██╔╝ 
+╚═╝
+
+`,
+	'?': `
+██████╗ 
+╚════██╗
+  ▄███╔╝
+  ▀▀══╝ 
+  ██╗   
+  ╚═╝   
+        
+`,
+	'/': `
+    ██╗
+   ██╔╝
+  ██╔╝ 
+ ██╔╝  
+██╔╝   
+╚═╝    
+       
+`,
+}
+
+const AsciiHeight = 7
+
+// GetAlphaAscii get ascii string
+func GetAlphaAscii(str string) string {
+
+	upperStr := strings.ToUpper(str)
+
+	var format [][]string
+	for _, alpha := range upperStr {
+		if ascii, exists := alphaAscii[alpha]; exists {
+			format = append(format, strings.Split(ascii, "\n"))
+		}
+	}
+
+	var lines []string
+	for i := 0; i < AsciiHeight; i++ {
+		var line strings.Builder
+		for _, item := range format {
+			if i > len(item) {
+				continue
+			}
+			line.WriteString(" ")
+			line.WriteString(item[i])
+		}
+		lines = append(lines, line.String())
+		line.Reset()
+	}
+
+	return strings.Join(lines, "\n")
+}
diff --git a/vendor/github.com/anhoder/foxful-cli/util/constants.go b/vendor/github.com/anhoder/foxful-cli/util/constants.go
new file mode 100644
index 0000000..5784cc9
--- /dev/null
+++ b/vendor/github.com/anhoder/foxful-cli/util/constants.go
@@ -0,0 +1,7 @@
+package util
+
+const (
+	RandomColor = "random"
+	PkgName     = "foxful-cli"
+	LoadingText = "[Loading...]"
+)
diff --git a/vendor/github.com/anhoder/foxful-cli/util/input.go b/vendor/github.com/anhoder/foxful-cli/util/input.go
new file mode 100644
index 0000000..1419cca
--- /dev/null
+++ b/vendor/github.com/anhoder/foxful-cli/util/input.go
@@ -0,0 +1,60 @@
+package util
+
+import (
+	"fmt"
+
+	"github.com/muesli/termenv"
+)
+
+var (
+	focusedPrompt,
+	blurredPrompt,
+	focusedSubmitButton,
+	blurredSubmitButton string
+)
+
+const SubmitText = "Submit"
+
+func GetFocusedPrompt() string {
+	if focusedPrompt != "" {
+		return focusedPrompt
+	}
+
+	focusedPrompt = termenv.String("> ").Foreground(GetPrimaryColor()).String()
+
+	return focusedPrompt
+}
+
+func GetBlurredPrompt() string {
+	if blurredPrompt != "" {
+		return blurredPrompt
+	}
+
+	blurredPrompt = "> "
+
+	return blurredPrompt
+}
+
+func GetFocusedButton(text string) string {
+	return fmt.Sprintf("[ %s ]", termenv.String(text).Foreground(GetPrimaryColor()).String())
+}
+
+func GetBlurredButton(text string) string {
+	return fmt.Sprintf("[ %s ]", termenv.String(text).Foreground(termenv.ANSIBrightBlack).String())
+}
+
+func GetFocusedSubmitButton() string {
+	if focusedSubmitButton != "" {
+		return focusedSubmitButton
+	}
+	focusedSubmitButton = GetFocusedButton(SubmitText)
+	return focusedSubmitButton
+}
+
+func GetBlurredSubmitButton() string {
+	if blurredSubmitButton != "" {
+		return blurredSubmitButton
+	}
+	blurredSubmitButton = GetBlurredButton(SubmitText)
+	return blurredSubmitButton
+}
diff --git a/vendor/github.com/anhoder/foxful-cli/util/stack.go b/vendor/github.com/anhoder/foxful-cli/util/stack.go
new file mode 100644
index 0000000..081409e
--- /dev/null
+++ b/vendor/github.com/anhoder/foxful-cli/util/stack.go
@@ -0,0 +1,53 @@
+package util
+
+type SNode struct {
+	value interface{}
+	pre   *SNode
+	next  *SNode
+}
+
+type Stack struct {
+	tail *SNode
+	len  int
+}
+
+func (s *Stack) Len() int {
+	return s.len
+}
+
+func (s *Stack) Peek() interface{} {
+	if s.tail == nil {
+		return nil
+	}
+	return s.tail.value
+}
+
+func (s *Stack) Push(value interface{}) {
+	newNode := &SNode{value, nil, nil}
+	if s.tail == nil {
+		s.tail = newNode
+	} else {
+		newNode.pre = s.tail
+		s.tail.next = newNode
+		s.tail = newNode
+	}
+	s.len++
+	newNode = nil
+}
+
+func (s *Stack) Pop() interface{} {
+	if s.tail == nil {
+		return nil
+	}
+	last := s.tail
+	value := last.value
+
+	s.tail = last.pre
+	last.pre = nil
+	last.next = nil
+	last.value = nil
+	s.len--
+	last = nil
+
+	return value
+}
diff --git a/vendor/github.com/anhoder/foxful-cli/util/ui.go b/vendor/github.com/anhoder/foxful-cli/util/ui.go
new file mode 100644
index 0000000..fb46e6d
--- /dev/null
+++ b/vendor/github.com/anhoder/foxful-cli/util/ui.go
@@ -0,0 +1,121 @@
+package util
+
+import (
+	"fmt"
+	"math/rand"
+	"strconv"
+	"strings"
+	"time"
+
+	"github.com/charmbracelet/lipgloss"
+	"github.com/lucasb-eyer/go-colorful"
+	"github.com/muesli/termenv"
+)
+
+var (
+	TermProfile      = termenv.ColorProfile()
+	PrimaryColor     string
+	_primaryColor    termenv.Color
+	_primaryColorStr string
+)
+
+// GetPrimaryColor get random color
+func GetPrimaryColor() termenv.Color {
+	if _primaryColor != nil {
+		return _primaryColor
+	}
+	initPrimaryColor()
+	return _primaryColor
+}
+
+func GetPrimaryColorString() string {
+	if _primaryColorStr != "" {
+		return _primaryColorStr
+	}
+	initPrimaryColor()
+	return _primaryColorStr
+}
+
+func initPrimaryColor() {
+	if _primaryColorStr != "" && _primaryColor != nil {
+		return
+	}
+	if PrimaryColor == "" || PrimaryColor == RandomColor {
+		rand.New(rand.NewSource(time.Now().UnixNano()))
+		_primaryColorStr = strconv.Itoa(rand.Intn(228-17) + 17)
+	} else {
+		_primaryColorStr = PrimaryColor
+	}
+	_primaryColor = TermProfile.Color(GetPrimaryColorString())
+}
+
+// GetRandomRgbColor get random rgb color
+func GetRandomRgbColor(isRange bool) (string, string) {
+	rand.New(rand.NewSource(time.Now().UnixNano()))
+	r := 255 - rand.Intn(100)
+	rand.New(rand.NewSource(time.Now().UnixNano() / 2))
+	g := 255 - rand.Intn(100)
+	rand.New(rand.NewSource(time.Now().UnixNano() / 3))
+	b := 255 - rand.Intn(100)
+
+	startColor := fmt.Sprintf("#%x%x%x", r, g, b)
+	if !isRange {
+		return startColor, ""
+	}
+
+	rand.New(rand.NewSource(time.Now().UnixNano() / 5))
+	rEnd := 50 + rand.Intn(100)
+	rand.New(rand.NewSource(time.Now().UnixNano() / 7))
+	gEnd := 50 + rand.Intn(100)
+	rand.New(rand.NewSource(time.Now().UnixNano() / 11))
+	bEnd := 50 + rand.Intn(100)
+	endColor := fmt.Sprintf("#%x%x%x", rEnd, gEnd, bEnd)
+
+	return startColor, endColor
+}
+
+// SetFgStyle Return a function that will colorize the foreground of a given string.
+func SetFgStyle(content string, color termenv.Color) string {
+	return termenv.Style{}.Foreground(color).Styled(content)
+}
+
+// SetFgBgStyle Color a string's foreground and background with the given value.
+func SetFgBgStyle(content string, fg, bg termenv.Color) string {
+	return termenv.Style{}.Foreground(fg).Background(bg).Styled(content)
+}
+
+// SetNormalStyle don't set any style
+func SetNormalStyle(content string) string {
+	seq := strings.Join([]string{"0"}, ";")
+	return fmt.Sprintf("%s%sm%s%sm", termenv.CSI, seq, content, termenv.CSI+termenv.ResetSeq)
+}
+
+func GetPrimaryFontStyle() lipgloss.Style {
+	return lipgloss.NewStyle().Foreground(lipgloss.Color(GetPrimaryColorString()))
+}
+
+// MakeRamp Generate a blend of colors.
+func MakeRamp(colorA, colorB string, steps float64) (s []string) {
+	cA, _ := colorful.Hex(colorA)
+	cB, _ := colorful.Hex(colorB)
+
+	for i := 0.0; i < steps; i++ {
+		c := cA.BlendLuv(cB, i/steps)
+		s = append(s, colorToHex(c))
+	}
+	return
+}
+
+// Convert a colorful.Color to a hexidecimal format compatible with termenv.
+func colorToHex(c colorful.Color) string {
+	return fmt.Sprintf("#%s%s%s", colorFloatToHex(c.R), colorFloatToHex(c.G), colorFloatToHex(c.B))
+}
+
+// Helper function for converting colors to hex. Assumes a value between 0 and 1.
+func colorFloatToHex(f float64) (s string) {
+	s = strconv.FormatInt(int64(f*255), 16)
+	if len(s) == 1 {
+		s = "0" + s
+	}
+	return
+}
diff --git a/vendor/github.com/ebitengine/purego/README.md b/vendor/github.com/ebitengine/purego/README.md
index 2bf521e..b8480f4 100644
--- a/vendor/github.com/ebitengine/purego/README.md
+++ b/vendor/github.com/ebitengine/purego/README.md
@@ -19,6 +19,8 @@ born to bring that same vision to the other platforms supported by Ebitengine.
 
 ## Example
 
+This example only works on macOS and Linux. For a complete example look at [libc](https://github.com/ebitengine/purego/tree/main/examples/libc) which supports Windows.
+
 ```go
 package main
 
diff --git a/vendor/github.com/ebitengine/purego/error.go b/vendor/github.com/ebitengine/purego/dlerror.go
similarity index 90%
rename from vendor/github.com/ebitengine/purego/error.go
rename to vendor/github.com/ebitengine/purego/dlerror.go
index ccb94ec..e5ce708 100644
--- a/vendor/github.com/ebitengine/purego/error.go
+++ b/vendor/github.com/ebitengine/purego/dlerror.go
@@ -1,6 +1,8 @@
 // SPDX-License-Identifier: Apache-2.0
 // SPDX-FileCopyrightText: 2023 The Ebitengine Authors
 
+//go:build darwin || linux
+
 package purego
 
 // Dlerror represents an error value returned from Dlopen, Dlsym, or Dlclose.
diff --git a/vendor/github.com/ebitengine/purego/dlfcn.go b/vendor/github.com/ebitengine/purego/dlfcn.go
index 5e8e584..5b53560 100644
--- a/vendor/github.com/ebitengine/purego/dlfcn.go
+++ b/vendor/github.com/ebitengine/purego/dlfcn.go
@@ -35,8 +35,8 @@ func init() {
 // Dlopen calls should be balanced with a Dlclose call.
 func Dlopen(path string, mode int) (uintptr, error) {
 	u := fnDlopen(path, mode)
-	if errStr := fnDlerror(); errStr != "" {
-		return 0, Dlerror{errStr}
+	if u == 0 {
+		return 0, Dlerror{fnDlerror()}
 	}
 	return u, nil
 }
@@ -47,8 +47,8 @@ func Dlopen(path string, mode int) (uintptr, error) {
 // when that library was loaded, Dlsym returns zero.
 func Dlsym(handle uintptr, name string) (uintptr, error) {
 	u := fnDlsym(handle, name)
-	if errStr := fnDlerror(); errStr != "" {
-		return 0, Dlerror{errStr}
+	if u == 0 {
+		return 0, Dlerror{fnDlerror()}
 	}
 	return u, nil
 }
@@ -63,6 +63,15 @@ func Dlclose(handle uintptr) error {
 	return nil
 }
 
+//go:linkname openLibrary openLibrary
+func openLibrary(name string) (uintptr, error) {
+	return Dlopen(name, RTLD_NOW|RTLD_GLOBAL)
+}
+
+func loadSymbol(handle uintptr, name string) (uintptr, error) {
+	return Dlsym(handle, name)
+}
+
 // these functions exist in dlfcn_stubs.s and are calling C functions linked to in dlfcn_GOOS.go
 // the indirection is necessary because a function is actually a pointer to the pointer to the code.
 // sadly, I do not know of anyway to remove the assembly stubs entirely because //go:linkname doesn't
diff --git a/vendor/github.com/ebitengine/purego/dlfcn_darwin.go b/vendor/github.com/ebitengine/purego/dlfcn_darwin.go
index b57c3f3..66ccf16 100644
--- a/vendor/github.com/ebitengine/purego/dlfcn_darwin.go
+++ b/vendor/github.com/ebitengine/purego/dlfcn_darwin.go
@@ -6,10 +6,11 @@ package purego
 // Source for constants: https://opensource.apple.com/source/dyld/dyld-360.14/include/dlfcn.h.auto.html
 
 const (
-	RTLD_LAZY   = 0x1 // Relocations are performed at an implementation-dependent time.
-	RTLD_NOW    = 0x2 // Relocations are performed when the object is loaded.
-	RTLD_LOCAL  = 0x4 // All symbols are not made available for relocation processing by other modules.
-	RTLD_GLOBAL = 0x8 // All symbols are available for relocation processing of other modules.
+	RTLD_DEFAULT = ^uintptr(0) - 1 // Pseudo-handle for dlsym so search for any loaded symbol
+	RTLD_LAZY    = 0x1             // Relocations are performed at an implementation-dependent time.
+	RTLD_NOW     = 0x2             // Relocations are performed when the object is loaded.
+	RTLD_LOCAL   = 0x4             // All symbols are not made available for relocation processing by other modules.
+	RTLD_GLOBAL  = 0x8             // All symbols are available for relocation processing of other modules.
 )
 
 //go:cgo_import_dynamic purego_dlopen dlopen "/usr/lib/libSystem.B.dylib"
diff --git a/vendor/github.com/ebitengine/purego/dlfcn_linux.go b/vendor/github.com/ebitengine/purego/dlfcn_linux.go
index c76a52a..3011275 100644
--- a/vendor/github.com/ebitengine/purego/dlfcn_linux.go
+++ b/vendor/github.com/ebitengine/purego/dlfcn_linux.go
@@ -6,8 +6,9 @@ package purego
 // Source for constants: https://codebrowser.dev/glibc/glibc/bits/dlfcn.h.html
 
 const (
-	RTLD_LAZY   = 0x00001 // Relocations are performed at an implementation-dependent time.
-	RTLD_NOW    = 0x00002 // Relocations are performed when the object is loaded.
-	RTLD_LOCAL  = 0x00000 // All symbols are not made available for relocation processing by other modules.
-	RTLD_GLOBAL = 0x00100 // All symbols are available for relocation processing of other modules.
+	RTLD_DEFAULT = 0x00000 // Pseudo-handle for dlsym so search for any loaded symbol
+	RTLD_LAZY    = 0x00001 // Relocations are performed at an implementation-dependent time.
+	RTLD_NOW     = 0x00002 // Relocations are performed when the object is loaded.
+	RTLD_LOCAL   = 0x00000 // All symbols are not made available for relocation processing by other modules.
+	RTLD_GLOBAL  = 0x00100 // All symbols are available for relocation processing of other modules.
 )
diff --git a/vendor/github.com/ebitengine/purego/dlfcn_stubs.s b/vendor/github.com/ebitengine/purego/dlfcn_stubs.s
index c80116d..dca30f9 100644
--- a/vendor/github.com/ebitengine/purego/dlfcn_stubs.s
+++ b/vendor/github.com/ebitengine/purego/dlfcn_stubs.s
@@ -6,21 +6,21 @@
 #include "textflag.h"
 
 // func dlopen(path *byte, mode int) (ret uintptr)
-TEXT dlopen(SB), NOSPLIT, $0-0
+TEXT dlopen(SB), NOSPLIT|NOFRAME, $0-0
 	JMP purego_dlopen(SB)
 	RET
 
 // func dlsym(handle uintptr, symbol *byte) (ret uintptr)
-TEXT dlsym(SB), NOSPLIT, $0-0
+TEXT dlsym(SB), NOSPLIT|NOFRAME, $0-0
 	JMP purego_dlsym(SB)
 	RET
 
 // func dlerror() (ret *byte)
-TEXT dlerror(SB), NOSPLIT, $0-0
+TEXT dlerror(SB), NOSPLIT|NOFRAME, $0-0
 	JMP purego_dlerror(SB)
 	RET
 
 // func dlclose(handle uintptr) (ret int)
-TEXT dlclose(SB), NOSPLIT, $0-0
+TEXT dlclose(SB), NOSPLIT|NOFRAME, $0-0
 	JMP purego_dlclose(SB)
 	RET
diff --git a/vendor/github.com/ebitengine/purego/func.go b/vendor/github.com/ebitengine/purego/func.go
index 29fb393..8ddf76d 100644
--- a/vendor/github.com/ebitengine/purego/func.go
+++ b/vendor/github.com/ebitengine/purego/func.go
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: Apache-2.0
 // SPDX-FileCopyrightText: 2022 The Ebitengine Authors
 
-//go:build darwin || linux
+//go:build darwin || linux || windows
 
 package purego
 
@@ -15,11 +15,9 @@ import (
 )
 
 // RegisterLibFunc is a wrapper around RegisterFunc that uses the C function returned from Dlsym(handle, name).
-// It panics if Dlsym fails.
-//
-// Windows does not support this function.
+// It panics if it can't find the name symbol.
 func RegisterLibFunc(fptr interface{}, handle uintptr, name string) {
-	sym, err := Dlsym(handle, name)
+	sym, err := loadSymbol(handle, name)
 	if err != nil {
 		panic(err)
 	}
@@ -67,8 +65,6 @@ func RegisterLibFunc(fptr interface{}, handle uintptr, name string) {
 // There are some limitations when using RegisterFunc on Linux. First, there is no support for function arguments.
 // Second, float32 and float64 arguments and return values do not work when CGO_ENABLED=1. Otherwise, Linux
 // has the same feature parity as Darwin.
-//
-// Windows does not support this function.
 func RegisterFunc(fptr interface{}, cfn uintptr) {
 	fn := reflect.ValueOf(fptr).Elem()
 	ty := fn.Type()
@@ -99,7 +95,7 @@ func RegisterFunc(fptr interface{}, cfn uintptr) {
 					stack++
 				}
 			case reflect.Float32, reflect.Float64:
-				if floats < 8 {
+				if floats < numOfFloats {
 					floats++
 				} else {
 					stack++
@@ -108,7 +104,8 @@ func RegisterFunc(fptr interface{}, cfn uintptr) {
 				panic("purego: unsupported kind " + arg.Kind().String())
 			}
 		}
-		if ints+stack > maxArgs || floats+stack > maxArgs {
+		sizeOfStack := maxArgs - numOfIntegerRegisters()
+		if stack > sizeOfStack {
 			panic("purego: too many arguments")
 		}
 	}
@@ -126,26 +123,52 @@ func RegisterFunc(fptr interface{}, cfn uintptr) {
 			}
 		}
 		var sysargs [maxArgs]uintptr
-		var stack = sysargs[numOfIntegerRegisters():]
-		var floats [8]float64
+		stack := sysargs[numOfIntegerRegisters():]
+		var floats [numOfFloats]uintptr
 		var numInts int
 		var numFloats int
 		var numStack int
-		addStack := func(x uintptr) {
-			stack[numStack] = x
-			numStack++
-		}
-		addInt := func(x uintptr) {
-			if numInts >= numOfIntegerRegisters() {
-				addStack(x)
-			} else {
-				sysargs[numInts] = x
-				numInts++
+		var addStack, addInt, addFloat func(x uintptr)
+		if runtime.GOARCH == "arm64" || runtime.GOOS != "windows" {
+			// Windows arm64 uses the same calling convention as macOS and Linux
+			addStack = func(x uintptr) {
+				stack[numStack] = x
+				numStack++
+			}
+			addInt = func(x uintptr) {
+				if numInts >= numOfIntegerRegisters() {
+					addStack(x)
+				} else {
+					sysargs[numInts] = x
+					numInts++
+				}
+			}
+			addFloat = func(x uintptr) {
+				if numFloats < len(floats) {
+					floats[numFloats] = x
+					numFloats++
+				} else {
+					addStack(x)
+				}
 			}
+		} else {
+			// On Windows amd64 the arguments are passed in the numbered registered.
+			// So the first int is in the first integer register and the first float
+			// is in the second floating register if there is already a first int.
+			// This is in contrast to how macOS and Linux pass arguments which
+			// tries to use as many registers as possible in the calling convention.
+			addStack = func(x uintptr) {
+				sysargs[numStack] = x
+				numStack++
+			}
+			addInt = addStack
+			addFloat = addStack
 		}
+
 		var keepAlive []interface{}
 		defer func() {
 			runtime.KeepAlive(keepAlive)
+			runtime.KeepAlive(args)
 		}()
 		for _, v := range args {
 			switch v.Kind() {
@@ -158,7 +181,7 @@ func RegisterFunc(fptr interface{}, cfn uintptr) {
 			case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
 				addInt(uintptr(v.Int()))
 			case reflect.Ptr, reflect.UnsafePointer, reflect.Slice:
-				keepAlive = append(keepAlive, v.Pointer())
+				// There is no need to keepAlive this pointer separately because it is kept alive in the args variable
 				addInt(v.Pointer())
 			case reflect.Func:
 				addInt(NewCallback(v.Interface()))
@@ -168,26 +191,30 @@ func RegisterFunc(fptr interface{}, cfn uintptr) {
 				} else {
 					addInt(0)
 				}
-			case reflect.Float32, reflect.Float64:
-				if numFloats < len(floats) {
-					floats[numFloats] = v.Float()
-					numFloats++
-				} else {
-					addStack(uintptr(math.Float64bits(v.Float())))
-				}
+			case reflect.Float32:
+				addFloat(uintptr(math.Float32bits(float32(v.Float()))))
+			case reflect.Float64:
+				addFloat(uintptr(math.Float64bits(v.Float())))
 			default:
 				panic("purego: unsupported kind: " + v.Kind().String())
 			}
 		}
 		// TODO: support structs
-		syscall := syscall9Args{
-			cfn,
-			sysargs[0], sysargs[1], sysargs[2], sysargs[3], sysargs[4], sysargs[5], sysargs[6], sysargs[7], sysargs[8],
-			floats[0], floats[1], floats[2], floats[3], floats[4], floats[5], floats[6], floats[7],
-			0, 0, 0}
-		runtime_cgocall(syscall9XABI0, unsafe.Pointer(&syscall))
-		r1, r2 := syscall.r1, syscall.r2
-
+		var r1, r2 uintptr
+		if runtime.GOARCH == "arm64" || runtime.GOOS != "windows" {
+			// Use the normal arm64 calling convention even on Windows
+			syscall := syscall9Args{
+				cfn,
+				sysargs[0], sysargs[1], sysargs[2], sysargs[3], sysargs[4], sysargs[5], sysargs[6], sysargs[7], sysargs[8],
+				floats[0], floats[1], floats[2], floats[3], floats[4], floats[5], floats[6], floats[7],
+				0, 0, 0,
+			}
+			runtime_cgocall(syscall9XABI0, unsafe.Pointer(&syscall))
+			r1, r2 = syscall.r1, syscall.r2
+		} else {
+			// This is a fallback for amd64, 386, and arm. Note this may not support floats
+			r1, r2, _ = syscall_syscall9X(cfn, sysargs[0], sysargs[1], sysargs[2], sysargs[3], sysargs[4], sysargs[5], sysargs[6], sysargs[7], sysargs[8])
+		}
 		if ty.NumOut() == 0 {
 			return nil
 		}
@@ -204,7 +231,8 @@ func RegisterFunc(fptr interface{}, cfn uintptr) {
 			// We take the address and then dereference it to trick go vet from creating a possible miss-use of unsafe.Pointer
 			v.SetPointer(*(*unsafe.Pointer)(unsafe.Pointer(&r1)))
 		case reflect.Ptr:
-			v = reflect.NewAt(outType, unsafe.Pointer(&r1)).Elem()
+			// It is safe to have the address of r1 not escape because it is immediately dereferenced with .Elem()
+			v = reflect.NewAt(outType, runtime_noescape(unsafe.Pointer(&r1))).Elem()
 		case reflect.Func:
 			// wrap this C function in a nicely typed Go function
 			v = reflect.New(outType)
@@ -229,6 +257,11 @@ func numOfIntegerRegisters() int {
 		return 8
 	case "amd64":
 		return 6
+	// TODO: figure out why 386 tests are not working
+	/*case "386":
+		return 0
+	case "arm":
+		return 4*/
 	default:
 		panic("purego: unknown GOARCH (" + runtime.GOARCH + ")")
 	}
diff --git a/vendor/github.com/ebitengine/purego/go_runtime.go b/vendor/github.com/ebitengine/purego/go_runtime.go
index e4f0097..d434740 100644
--- a/vendor/github.com/ebitengine/purego/go_runtime.go
+++ b/vendor/github.com/ebitengine/purego/go_runtime.go
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: Apache-2.0
 // SPDX-FileCopyrightText: 2022 The Ebitengine Authors
 
-//go:build darwin || linux
+//go:build darwin || linux || windows
 
 package purego
 
@@ -11,3 +11,7 @@ import (
 
 //go:linkname runtime_cgocall runtime.cgocall
 func runtime_cgocall(fn uintptr, arg unsafe.Pointer) int32 // from runtime/sys_libc.go
+
+//go:linkname runtime_noescape runtime.noescape
+//go:noescape
+func runtime_noescape(p unsafe.Pointer) unsafe.Pointer // from runtime/stubs.go
diff --git a/vendor/github.com/ebitengine/purego/internal/fakecgo/asm_amd64.s b/vendor/github.com/ebitengine/purego/internal/fakecgo/asm_amd64.s
index 4f02a5d..6439f33 100644
--- a/vendor/github.com/ebitengine/purego/internal/fakecgo/asm_amd64.s
+++ b/vendor/github.com/ebitengine/purego/internal/fakecgo/asm_amd64.s
@@ -3,74 +3,37 @@
 // license that can be found in the LICENSE file.
 
 #include "textflag.h"
+#include "../abi/abi_amd64.h"
 
 // Called by C code generated by cmd/cgo.
 // func crosscall2(fn, a unsafe.Pointer, n int32, ctxt uintptr)
 // Saves C callee-saved registers and calls cgocallback with three arguments.
 // fn is the PC of a func(a unsafe.Pointer) function.
 // This signature is known to SWIG, so we can't change it.
-#ifndef GOOS_windows
-TEXT crosscall2(SB), NOSPLIT, $0x50-0 // keeps stack pointer 32-byte aligned
-#else
-TEXT crosscall2(SB), NOSPLIT, $0x110-0 // also need to save xmm6 - xmm15
-#endif
-	MOVQ BX, 0x18(SP)
-	MOVQ R12, 0x28(SP)
-	MOVQ R13, 0x30(SP)
-	MOVQ R14, 0x38(SP)
-	MOVQ R15, 0x40(SP)
-
-#ifdef GOOS_windows
-	// Win64 save RBX, RBP, RDI, RSI, RSP, R12, R13, R14, R15 and XMM6 -- XMM15.
-	MOVQ   DI, 0x48(SP)
-	MOVQ   SI, 0x50(SP)
-	MOVUPS X6, 0x60(SP)
-	MOVUPS X7, 0x70(SP)
-	MOVUPS X8, 0x80(SP)
-	MOVUPS X9, 0x90(SP)
-	MOVUPS X10, 0xa0(SP)
-	MOVUPS X11, 0xb0(SP)
-	MOVUPS X12, 0xc0(SP)
-	MOVUPS X13, 0xd0(SP)
-	MOVUPS X14, 0xe0(SP)
-	MOVUPS X15, 0xf0(SP)
-
-	MOVQ CX, 0x0(SP) // fn
-	MOVQ DX, 0x8(SP) // arg
-
-	// Skip n in R8.
-	MOVQ R9, 0x10(SP) // ctxt
-
-	CALL runtime·cgocallback(SB)
+TEXT crosscall2(SB), NOSPLIT|NOFRAME, $0-0
+	PUSH_REGS_HOST_TO_ABI0()
 
-	MOVQ   0x48(SP), DI
-	MOVQ   0x50(SP), SI
-	MOVUPS 0x60(SP), X6
-	MOVUPS 0x70(SP), X7
-	MOVUPS 0x80(SP), X8
-	MOVUPS 0x90(SP), X9
-	MOVUPS 0xa0(SP), X10
-	MOVUPS 0xb0(SP), X11
-	MOVUPS 0xc0(SP), X12
-	MOVUPS 0xd0(SP), X13
-	MOVUPS 0xe0(SP), X14
-	MOVUPS 0xf0(SP), X15
+	// Make room for arguments to cgocallback.
+	ADJSP $0x18
 
-#else
+#ifndef GOOS_windows
 	MOVQ DI, 0x0(SP) // fn
 	MOVQ SI, 0x8(SP) // arg
 
 	// Skip n in DX.
 	MOVQ CX, 0x10(SP) // ctxt
 
-	CALL runtime·cgocallback(SB)
+#else
+	MOVQ CX, 0x0(SP) // fn
+	MOVQ DX, 0x8(SP) // arg
+
+	// Skip n in R8.
+	MOVQ R9, 0x10(SP) // ctxt
 
 #endif
 
-	MOVQ 0x18(SP), BX
-	MOVQ 0x28(SP), R12
-	MOVQ 0x30(SP), R13
-	MOVQ 0x38(SP), R14
-	MOVQ 0x40(SP), R15
+	CALL runtime·cgocallback(SB)
 
+	ADJSP $-0x18
+	POP_REGS_HOST_TO_ABI0()
 	RET
diff --git a/vendor/github.com/ebitengine/purego/internal/fakecgo/callbacks.go b/vendor/github.com/ebitengine/purego/internal/fakecgo/callbacks.go
index 84ee25b..fe39f32 100644
--- a/vendor/github.com/ebitengine/purego/internal/fakecgo/callbacks.go
+++ b/vendor/github.com/ebitengine/purego/internal/fakecgo/callbacks.go
@@ -6,7 +6,9 @@
 
 package fakecgo
 
-import _ "unsafe"
+import (
+	_ "unsafe"
+)
 
 // TODO: decide if we need _runtime_cgo_panic_internal
 
@@ -39,6 +41,33 @@ var _cgo_thread_start = &x_cgo_thread_start_trampoline
 var x_cgo_notify_runtime_init_done_trampoline byte
 var _cgo_notify_runtime_init_done = &x_cgo_notify_runtime_init_done_trampoline
 
+// Indicates whether a dummy thread key has been created or not.
+//
+// When calling go exported function from C, we register a destructor
+// callback, for a dummy thread key, by using pthread_key_create.
+
+//go:linkname _cgo_pthread_key_created _cgo_pthread_key_created
+var x_cgo_pthread_key_created uintptr
+var _cgo_pthread_key_created = &x_cgo_pthread_key_created
+
+// Set the x_crosscall2_ptr C function pointer variable point to crosscall2.
+// It's for the runtime package to call at init time.
+func set_crosscall2() {
+	// nothing needs to be done here for fakecgo
+	// because it's possible to just call cgocallback directly
+}
+
+//go:linkname _set_crosscall2 runtime.set_crosscall2
+var _set_crosscall2 = set_crosscall2
+
+// Store the g into the thread-specific value.
+// So that pthread_key_destructor will dropm when the thread is exiting.
+
+//go:linkname x_cgo_bindm_trampoline x_cgo_bindm_trampoline
+//go:linkname _cgo_bindm _cgo_bindm
+var x_cgo_bindm_trampoline byte
+var _cgo_bindm = &x_cgo_bindm_trampoline
+
 // TODO: decide if we need x_cgo_set_context_function
 // TODO: decide if we need _cgo_yield
 
diff --git a/vendor/github.com/ebitengine/purego/internal/fakecgo/go_libinit.go b/vendor/github.com/ebitengine/purego/internal/fakecgo/go_libinit.go
index 16b0aac..c824e24 100644
--- a/vendor/github.com/ebitengine/purego/internal/fakecgo/go_libinit.go
+++ b/vendor/github.com/ebitengine/purego/internal/fakecgo/go_libinit.go
@@ -10,9 +10,30 @@ import (
 	"unsafe"
 )
 
+var (
+	pthread_g pthread_key_t
+
+	runtime_init_cond = PTHREAD_COND_INITIALIZER
+	runtime_init_mu   = PTHREAD_MUTEX_INITIALIZER
+	runtime_init_done int
+)
+
 //go:nosplit
 func x_cgo_notify_runtime_init_done() {
-	// we don't support being called as a library
+	pthread_mutex_lock(&runtime_init_mu)
+	runtime_init_done = 1
+	pthread_cond_broadcast(&runtime_init_cond)
+	pthread_mutex_unlock(&runtime_init_mu)
+}
+
+// Store the g into a thread-specific value associated with the pthread key pthread_g.
+// And pthread_key_destructor will dropm when the thread is exiting.
+func x_cgo_bindm(g unsafe.Pointer) {
+	// We assume this will always succeed, otherwise, there might be extra M leaking,
+	// when a C thread exits after a cgo call.
+	// We only invoke this function once per thread in runtime.needAndBindM,
+	// and the next calls just reuse the bound m.
+	pthread_setspecific(pthread_g, g)
 }
 
 // _cgo_try_pthread_create retries pthread_create if it fails with
@@ -25,7 +46,7 @@ func _cgo_try_pthread_create(thread *pthread_t, attr *pthread_attr_t, pfn unsafe
 	// tries needs to be the same type as syscall.Timespec.Nsec
 	// but the fields are int32 on 32bit and int64 on 64bit.
 	// tries is assigned to syscall.Timespec.Nsec in order to match its type.
-	var tries = ts.Nsec
+	tries := ts.Nsec
 	var err int
 
 	for tries = 0; tries < 20; tries++ {
diff --git a/vendor/github.com/ebitengine/purego/internal/fakecgo/libcgo.go b/vendor/github.com/ebitengine/purego/internal/fakecgo/libcgo.go
index 0414b27..432813f 100644
--- a/vendor/github.com/ebitengine/purego/internal/fakecgo/libcgo.go
+++ b/vendor/github.com/ebitengine/purego/internal/fakecgo/libcgo.go
@@ -5,10 +5,13 @@
 
 package fakecgo
 
-type size_t uintptr
-type sigset_t [128]byte
-type pthread_attr_t [64]byte
-type pthread_t int
+type (
+	size_t         uintptr
+	sigset_t       [128]byte
+	pthread_attr_t [64]byte
+	pthread_t      int
+	pthread_key_t  uint64
+)
 
 // for pthread_sigmask:
 
diff --git a/vendor/github.com/ebitengine/purego/internal/fakecgo/libcgo_darwin.go b/vendor/github.com/ebitengine/purego/internal/fakecgo/libcgo_darwin.go
new file mode 100644
index 0000000..03c9171
--- /dev/null
+++ b/vendor/github.com/ebitengine/purego/internal/fakecgo/libcgo_darwin.go
@@ -0,0 +1,20 @@
+// SPDX-License-Identifier: Apache-2.0
+// SPDX-FileCopyrightText: 2022 The Ebitengine Authors
+
+package fakecgo
+
+type (
+	pthread_mutex_t struct {
+		sig    int64
+		opaque [56]byte
+	}
+	pthread_cond_t struct {
+		sig    int64
+		opaque [40]byte
+	}
+)
+
+var (
+	PTHREAD_COND_INITIALIZER  = pthread_cond_t{sig: 0x3CB0B1BB}
+	PTHREAD_MUTEX_INITIALIZER = pthread_mutex_t{sig: 0x32AAABA7}
+)
diff --git a/vendor/github.com/ebitengine/purego/internal/fakecgo/libcgo_linux.go b/vendor/github.com/ebitengine/purego/internal/fakecgo/libcgo_linux.go
new file mode 100644
index 0000000..93aa5b2
--- /dev/null
+++ b/vendor/github.com/ebitengine/purego/internal/fakecgo/libcgo_linux.go
@@ -0,0 +1,14 @@
+// SPDX-License-Identifier: Apache-2.0
+// SPDX-FileCopyrightText: 2022 The Ebitengine Authors
+
+package fakecgo
+
+type (
+	pthread_cond_t  [48]byte
+	pthread_mutex_t [48]byte
+)
+
+var (
+	PTHREAD_COND_INITIALIZER  = pthread_cond_t{}
+	PTHREAD_MUTEX_INITIALIZER = pthread_mutex_t{}
+)
diff --git a/vendor/github.com/ebitengine/purego/internal/fakecgo/symbols.go b/vendor/github.com/ebitengine/purego/internal/fakecgo/symbols.go
index 9dea763..56b9a52 100644
--- a/vendor/github.com/ebitengine/purego/internal/fakecgo/symbols.go
+++ b/vendor/github.com/ebitengine/purego/internal/fakecgo/symbols.go
@@ -39,6 +39,18 @@ func unsetenv(name *byte) int32 {
 	return int32(call5(unsetenvABI0, uintptr(unsafe.Pointer(name)), 0, 0, 0, 0))
 }
 
+func sigfillset(set *sigset_t) int32 {
+	return int32(call5(sigfillsetABI0, uintptr(unsafe.Pointer(set)), 0, 0, 0, 0))
+}
+
+func nanosleep(ts *syscall.Timespec, rem *syscall.Timespec) int32 {
+	return int32(call5(nanosleepABI0, uintptr(unsafe.Pointer(ts)), uintptr(unsafe.Pointer(rem)), 0, 0, 0))
+}
+
+func abort() {
+	call5(abortABI0, 0, 0, 0, 0, 0)
+}
+
 func pthread_attr_init(attr *pthread_attr_t) int32 {
 	return int32(call5(pthread_attr_initABI0, uintptr(unsafe.Pointer(attr)), 0, 0, 0, 0))
 }
@@ -75,16 +87,20 @@ func pthread_attr_destroy(attr *pthread_attr_t) int32 {
 	return int32(call5(pthread_attr_destroyABI0, uintptr(unsafe.Pointer(attr)), 0, 0, 0, 0))
 }
 
-func sigfillset(set *sigset_t) int32 {
-	return int32(call5(sigfillsetABI0, uintptr(unsafe.Pointer(set)), 0, 0, 0, 0))
+func pthread_mutex_lock(mutex *pthread_mutex_t) int32 {
+	return int32(call5(pthread_mutex_lockABI0, uintptr(unsafe.Pointer(mutex)), 0, 0, 0, 0))
 }
 
-func nanosleep(ts *syscall.Timespec, rem *syscall.Timespec) int32 {
-	return int32(call5(nanosleepABI0, uintptr(unsafe.Pointer(ts)), uintptr(unsafe.Pointer(rem)), 0, 0, 0))
+func pthread_mutex_unlock(mutex *pthread_mutex_t) int32 {
+	return int32(call5(pthread_mutex_unlockABI0, uintptr(unsafe.Pointer(mutex)), 0, 0, 0, 0))
 }
 
-func abort() {
-	call5(abortABI0, 0, 0, 0, 0, 0)
+func pthread_cond_broadcast(cond *pthread_cond_t) int32 {
+	return int32(call5(pthread_cond_broadcastABI0, uintptr(unsafe.Pointer(cond)), 0, 0, 0, 0))
+}
+
+func pthread_setspecific(key pthread_key_t, value unsafe.Pointer) int32 {
+	return int32(call5(pthread_setspecificABI0, uintptr(key), uintptr(value), 0, 0, 0))
 }
 
 //go:linkname _malloc _malloc
@@ -103,6 +119,18 @@ var setenvABI0 = uintptr(unsafe.Pointer(&_setenv))
 var _unsetenv uintptr
 var unsetenvABI0 = uintptr(unsafe.Pointer(&_unsetenv))
 
+//go:linkname _sigfillset _sigfillset
+var _sigfillset uintptr
+var sigfillsetABI0 = uintptr(unsafe.Pointer(&_sigfillset))
+
+//go:linkname _nanosleep _nanosleep
+var _nanosleep uintptr
+var nanosleepABI0 = uintptr(unsafe.Pointer(&_nanosleep))
+
+//go:linkname _abort _abort
+var _abort uintptr
+var abortABI0 = uintptr(unsafe.Pointer(&_abort))
+
 //go:linkname _pthread_attr_init _pthread_attr_init
 var _pthread_attr_init uintptr
 var pthread_attr_initABI0 = uintptr(unsafe.Pointer(&_pthread_attr_init))
@@ -139,14 +167,18 @@ var pthread_attr_setstacksizeABI0 = uintptr(unsafe.Pointer(&_pthread_attr_setsta
 var _pthread_attr_destroy uintptr
 var pthread_attr_destroyABI0 = uintptr(unsafe.Pointer(&_pthread_attr_destroy))
 
-//go:linkname _sigfillset _sigfillset
-var _sigfillset uintptr
-var sigfillsetABI0 = uintptr(unsafe.Pointer(&_sigfillset))
+//go:linkname _pthread_mutex_lock _pthread_mutex_lock
+var _pthread_mutex_lock uintptr
+var pthread_mutex_lockABI0 = uintptr(unsafe.Pointer(&_pthread_mutex_lock))
 
-//go:linkname _nanosleep _nanosleep
-var _nanosleep uintptr
-var nanosleepABI0 = uintptr(unsafe.Pointer(&_nanosleep))
+//go:linkname _pthread_mutex_unlock _pthread_mutex_unlock
+var _pthread_mutex_unlock uintptr
+var pthread_mutex_unlockABI0 = uintptr(unsafe.Pointer(&_pthread_mutex_unlock))
 
-//go:linkname _abort _abort
-var _abort uintptr
-var abortABI0 = uintptr(unsafe.Pointer(&_abort))
+//go:linkname _pthread_cond_broadcast _pthread_cond_broadcast
+var _pthread_cond_broadcast uintptr
+var pthread_cond_broadcastABI0 = uintptr(unsafe.Pointer(&_pthread_cond_broadcast))
+
+//go:linkname _pthread_setspecific _pthread_setspecific
+var _pthread_setspecific uintptr
+var pthread_setspecificABI0 = uintptr(unsafe.Pointer(&_pthread_setspecific))
diff --git a/vendor/github.com/ebitengine/purego/internal/fakecgo/symbols_darwin.go b/vendor/github.com/ebitengine/purego/internal/fakecgo/symbols_darwin.go
index d580873..7341fec 100644
--- a/vendor/github.com/ebitengine/purego/internal/fakecgo/symbols_darwin.go
+++ b/vendor/github.com/ebitengine/purego/internal/fakecgo/symbols_darwin.go
@@ -1,3 +1,5 @@
+// Code generated by 'go generate' with gen.go. DO NOT EDIT.
+
 // SPDX-License-Identifier: Apache-2.0
 // SPDX-FileCopyrightText: 2022 The Ebitengine Authors
 
@@ -7,15 +9,19 @@ package fakecgo
 //go:cgo_import_dynamic purego_free free "/usr/lib/libSystem.B.dylib"
 //go:cgo_import_dynamic purego_setenv setenv "/usr/lib/libSystem.B.dylib"
 //go:cgo_import_dynamic purego_unsetenv unsetenv "/usr/lib/libSystem.B.dylib"
-//go:cgo_import_dynamic purego_pthread_self pthread_self "/usr/lib/libSystem.B.dylib"
-//go:cgo_import_dynamic purego_pthread_get_stacksize_np pthread_get_stacksize_np "/usr/lib/libSystem.B.dylib"
-//go:cgo_import_dynamic purego_pthread_attr_setstacksize pthread_attr_setstacksize "/usr/lib/libSystem.B.dylib"
+//go:cgo_import_dynamic purego_sigfillset sigfillset "/usr/lib/libSystem.B.dylib"
+//go:cgo_import_dynamic purego_nanosleep nanosleep "/usr/lib/libSystem.B.dylib"
+//go:cgo_import_dynamic purego_abort abort "/usr/lib/libSystem.B.dylib"
 //go:cgo_import_dynamic purego_pthread_attr_init pthread_attr_init "/usr/lib/libSystem.B.dylib"
 //go:cgo_import_dynamic purego_pthread_create pthread_create "/usr/lib/libSystem.B.dylib"
 //go:cgo_import_dynamic purego_pthread_detach pthread_detach "/usr/lib/libSystem.B.dylib"
-//go:cgo_import_dynamic purego_pthread_attr_destroy pthread_attr_destroy "/usr/lib/libSystem.B.dylib"
-//go:cgo_import_dynamic purego_pthread_attr_getstacksize pthread_attr_getstacksize "/usr/lib/libSystem.B.dylib"
 //go:cgo_import_dynamic purego_pthread_sigmask pthread_sigmask "/usr/lib/libSystem.B.dylib"
-//go:cgo_import_dynamic purego_abort abort "/usr/lib/libSystem.B.dylib"
-//go:cgo_import_dynamic purego_sigfillset sigfillset "/usr/lib/libSystem.B.dylib"
-//go:cgo_import_dynamic purego_nanosleep nanosleep "/usr/lib/libSystem.B.dylib"
+//go:cgo_import_dynamic purego_pthread_self pthread_self "/usr/lib/libSystem.B.dylib"
+//go:cgo_import_dynamic purego_pthread_get_stacksize_np pthread_get_stacksize_np "/usr/lib/libSystem.B.dylib"
+//go:cgo_import_dynamic purego_pthread_attr_getstacksize pthread_attr_getstacksize "/usr/lib/libSystem.B.dylib"
+//go:cgo_import_dynamic purego_pthread_attr_setstacksize pthread_attr_setstacksize "/usr/lib/libSystem.B.dylib"
+//go:cgo_import_dynamic purego_pthread_attr_destroy pthread_attr_destroy "/usr/lib/libSystem.B.dylib"
+//go:cgo_import_dynamic purego_pthread_mutex_lock pthread_mutex_lock "/usr/lib/libSystem.B.dylib"
+//go:cgo_import_dynamic purego_pthread_mutex_unlock pthread_mutex_unlock "/usr/lib/libSystem.B.dylib"
+//go:cgo_import_dynamic purego_pthread_cond_broadcast pthread_cond_broadcast "/usr/lib/libSystem.B.dylib"
+//go:cgo_import_dynamic purego_pthread_setspecific pthread_setspecific "/usr/lib/libSystem.B.dylib"
diff --git a/vendor/github.com/ebitengine/purego/internal/fakecgo/symbols_linux.go b/vendor/github.com/ebitengine/purego/internal/fakecgo/symbols_linux.go
index 8dbe8cf..ee3ab7a 100644
--- a/vendor/github.com/ebitengine/purego/internal/fakecgo/symbols_linux.go
+++ b/vendor/github.com/ebitengine/purego/internal/fakecgo/symbols_linux.go
@@ -1,27 +1,27 @@
+// Code generated by 'go generate' with gen.go. DO NOT EDIT.
+
 // SPDX-License-Identifier: Apache-2.0
 // SPDX-FileCopyrightText: 2022 The Ebitengine Authors
 
 package fakecgo
 
-// pthread_attr_init will get us the wrong version on glibc - but this doesn't matter, since the memory we
-// provide is zeroed - which will lead the correct result again
-
-//go:cgo_import_dynamic purego_pthread_attr_init pthread_attr_init "libpthread.so.0"
-//go:cgo_import_dynamic purego_pthread_attr_getstacksize pthread_attr_getstacksize "libpthread.so.0"
-//go:cgo_import_dynamic purego_pthread_attr_destroy pthread_attr_destroy "libpthread.so.0"
-//go:cgo_import_dynamic purego_pthread_sigmask pthread_sigmask "libpthread.so.0"
-//go:cgo_import_dynamic purego_pthread_create pthread_create "libpthread.so.0"
-//go:cgo_import_dynamic purego_pthread_detach pthread_detach "libpthread.so.0"
-//go:cgo_import_dynamic purego_setenv setenv "libc.so.6"
-//go:cgo_import_dynamic purego_unsetenv unsetenv "libc.so.6"
 //go:cgo_import_dynamic purego_malloc malloc "libc.so.6"
 //go:cgo_import_dynamic purego_free free "libc.so.6"
-//go:cgo_import_dynamic purego_nanosleep nanosleep "libc.so.6"
+//go:cgo_import_dynamic purego_setenv setenv "libc.so.6"
+//go:cgo_import_dynamic purego_unsetenv unsetenv "libc.so.6"
 //go:cgo_import_dynamic purego_sigfillset sigfillset "libc.so.6"
+//go:cgo_import_dynamic purego_nanosleep nanosleep "libc.so.6"
 //go:cgo_import_dynamic purego_abort abort "libc.so.6"
-
-// on amd64 we don't need the following lines - on 386 we do...
-// anyway - with those lines the output is better (but doesn't matter) - without it on amd64 we get multiple DT_NEEDED with "libc.so.6" etc
-
-//go:cgo_import_dynamic _ _ "libpthread.so.0"
-//go:cgo_import_dynamic _ _ "libc.so.6"
+//go:cgo_import_dynamic purego_pthread_attr_init pthread_attr_init "libpthread.so.0"
+//go:cgo_import_dynamic purego_pthread_create pthread_create "libpthread.so.0"
+//go:cgo_import_dynamic purego_pthread_detach pthread_detach "libpthread.so.0"
+//go:cgo_import_dynamic purego_pthread_sigmask pthread_sigmask "libpthread.so.0"
+//go:cgo_import_dynamic purego_pthread_self pthread_self "libpthread.so.0"
+//go:cgo_import_dynamic purego_pthread_get_stacksize_np pthread_get_stacksize_np "libpthread.so.0"
+//go:cgo_import_dynamic purego_pthread_attr_getstacksize pthread_attr_getstacksize "libpthread.so.0"
+//go:cgo_import_dynamic purego_pthread_attr_setstacksize pthread_attr_setstacksize "libpthread.so.0"
+//go:cgo_import_dynamic purego_pthread_attr_destroy pthread_attr_destroy "libpthread.so.0"
+//go:cgo_import_dynamic purego_pthread_mutex_lock pthread_mutex_lock "libpthread.so.0"
+//go:cgo_import_dynamic purego_pthread_mutex_unlock pthread_mutex_unlock "libpthread.so.0"
+//go:cgo_import_dynamic purego_pthread_cond_broadcast pthread_cond_broadcast "libpthread.so.0"
+//go:cgo_import_dynamic purego_pthread_setspecific pthread_setspecific "libpthread.so.0"
diff --git a/vendor/github.com/ebitengine/purego/internal/fakecgo/trampolines_amd64.s b/vendor/github.com/ebitengine/purego/internal/fakecgo/trampolines_amd64.s
index cfd8c44..bbd101b 100644
--- a/vendor/github.com/ebitengine/purego/internal/fakecgo/trampolines_amd64.s
+++ b/vendor/github.com/ebitengine/purego/internal/fakecgo/trampolines_amd64.s
@@ -61,6 +61,10 @@ TEXT x_cgo_notify_runtime_init_done_trampoline(SB), NOSPLIT, $0
 	CALL ·x_cgo_notify_runtime_init_done(SB)
 	RET
 
+TEXT x_cgo_bindm_trampoline(SB), NOSPLIT, $0
+	CALL ·x_cgo_bindm(SB)
+	RET
+
 // func setg_trampoline(setg uintptr, g uintptr)
 TEXT ·setg_trampoline(SB), NOSPLIT, $0-16
 	MOVQ G+8(FP), DI
diff --git a/vendor/github.com/ebitengine/purego/internal/fakecgo/trampolines_arm64.s b/vendor/github.com/ebitengine/purego/internal/fakecgo/trampolines_arm64.s
index 54f3198..a71c2fe 100644
--- a/vendor/github.com/ebitengine/purego/internal/fakecgo/trampolines_arm64.s
+++ b/vendor/github.com/ebitengine/purego/internal/fakecgo/trampolines_arm64.s
@@ -41,6 +41,10 @@ TEXT x_cgo_notify_runtime_init_done_trampoline(SB), NOSPLIT, $0-0
 	CALL ·x_cgo_notify_runtime_init_done(SB)
 	RET
 
+TEXT x_cgo_bindm_trampoline(SB), NOSPLIT, $0
+	CALL ·x_cgo_bindm(SB)
+	RET
+
 // func setg_trampoline(setg uintptr, g uintptr)
 TEXT ·setg_trampoline(SB), NOSPLIT, $0-16
 	MOVD G+8(FP), R0
diff --git a/vendor/github.com/ebitengine/purego/internal/fakecgo/trampolines_stubs.s b/vendor/github.com/ebitengine/purego/internal/fakecgo/trampolines_stubs.s
index ada31ea..e150708 100644
--- a/vendor/github.com/ebitengine/purego/internal/fakecgo/trampolines_stubs.s
+++ b/vendor/github.com/ebitengine/purego/internal/fakecgo/trampolines_stubs.s
@@ -9,66 +9,82 @@
 
 // these stubs are here because it is not possible to go:linkname directly the C functions on darwin arm64
 
-TEXT _malloc(SB), NOSPLIT, $0-0
+TEXT _malloc(SB), NOSPLIT|NOFRAME, $0-0
 	JMP purego_malloc(SB)
 	RET
 
-TEXT _free(SB), NOSPLIT, $0-0
+TEXT _free(SB), NOSPLIT|NOFRAME, $0-0
 	JMP purego_free(SB)
 	RET
 
-TEXT _setenv(SB), NOSPLIT, $0-0
+TEXT _setenv(SB), NOSPLIT|NOFRAME, $0-0
 	JMP purego_setenv(SB)
 	RET
 
-TEXT _unsetenv(SB), NOSPLIT, $0-0
+TEXT _unsetenv(SB), NOSPLIT|NOFRAME, $0-0
 	JMP purego_unsetenv(SB)
 	RET
 
-TEXT _pthread_attr_init(SB), NOSPLIT, $0-0
+TEXT _sigfillset(SB), NOSPLIT|NOFRAME, $0-0
+	JMP purego_sigfillset(SB)
+	RET
+
+TEXT _nanosleep(SB), NOSPLIT|NOFRAME, $0-0
+	JMP purego_nanosleep(SB)
+	RET
+
+TEXT _abort(SB), NOSPLIT|NOFRAME, $0-0
+	JMP purego_abort(SB)
+	RET
+
+TEXT _pthread_attr_init(SB), NOSPLIT|NOFRAME, $0-0
 	JMP purego_pthread_attr_init(SB)
 	RET
 
-TEXT _pthread_create(SB), NOSPLIT, $0-0
+TEXT _pthread_create(SB), NOSPLIT|NOFRAME, $0-0
 	JMP purego_pthread_create(SB)
 	RET
 
-TEXT _pthread_detach(SB), NOSPLIT, $0-0
+TEXT _pthread_detach(SB), NOSPLIT|NOFRAME, $0-0
 	JMP purego_pthread_detach(SB)
 	RET
 
-TEXT _pthread_sigmask(SB), NOSPLIT, $0-0
+TEXT _pthread_sigmask(SB), NOSPLIT|NOFRAME, $0-0
 	JMP purego_pthread_sigmask(SB)
 	RET
 
-TEXT _pthread_self(SB), NOSPLIT, $0-0
+TEXT _pthread_self(SB), NOSPLIT|NOFRAME, $0-0
 	JMP purego_pthread_self(SB)
 	RET
 
-TEXT _pthread_get_stacksize_np(SB), NOSPLIT, $0-0
+TEXT _pthread_get_stacksize_np(SB), NOSPLIT|NOFRAME, $0-0
 	JMP purego_pthread_get_stacksize_np(SB)
 	RET
 
-TEXT _pthread_attr_getstacksize(SB), NOSPLIT, $0-0
+TEXT _pthread_attr_getstacksize(SB), NOSPLIT|NOFRAME, $0-0
 	JMP purego_pthread_attr_getstacksize(SB)
 	RET
 
-TEXT _pthread_attr_setstacksize(SB), NOSPLIT, $0-0
+TEXT _pthread_attr_setstacksize(SB), NOSPLIT|NOFRAME, $0-0
 	JMP purego_pthread_attr_setstacksize(SB)
 	RET
 
-TEXT _pthread_attr_destroy(SB), NOSPLIT, $0-0
+TEXT _pthread_attr_destroy(SB), NOSPLIT|NOFRAME, $0-0
 	JMP purego_pthread_attr_destroy(SB)
 	RET
 
-TEXT _sigfillset(SB), NOSPLIT, $0-0
-	JMP purego_sigfillset(SB)
+TEXT _pthread_mutex_lock(SB), NOSPLIT|NOFRAME, $0-0
+	JMP purego_pthread_mutex_lock(SB)
 	RET
 
-TEXT _nanosleep(SB), NOSPLIT, $0-0
-	JMP purego_nanosleep(SB)
+TEXT _pthread_mutex_unlock(SB), NOSPLIT|NOFRAME, $0-0
+	JMP purego_pthread_mutex_unlock(SB)
 	RET
 
-TEXT _abort(SB), NOSPLIT, $0-0
-	JMP purego_abort(SB)
+TEXT _pthread_cond_broadcast(SB), NOSPLIT|NOFRAME, $0-0
+	JMP purego_pthread_cond_broadcast(SB)
+	RET
+
+TEXT _pthread_setspecific(SB), NOSPLIT|NOFRAME, $0-0
+	JMP purego_pthread_setspecific(SB)
 	RET
diff --git a/vendor/github.com/ebitengine/purego/sys_amd64.s b/vendor/github.com/ebitengine/purego/sys_amd64.s
index dcdcb32..373046d 100644
--- a/vendor/github.com/ebitengine/purego/sys_amd64.s
+++ b/vendor/github.com/ebitengine/purego/sys_amd64.s
@@ -29,7 +29,7 @@
 // C calling convention (use libcCall).
 GLOBL ·syscall9XABI0(SB), NOPTR|RODATA, $8
 DATA ·syscall9XABI0(SB)/8, $syscall9X(SB)
-TEXT syscall9X(SB), NOSPLIT, $0
+TEXT syscall9X(SB), NOSPLIT|NOFRAME, $0
 	PUSHQ BP
 	MOVQ  SP, BP
 	SUBQ  $32, SP
@@ -73,22 +73,30 @@ TEXT syscall9X(SB), NOSPLIT, $0
 	POPQ BP
 	RET
 
-TEXT callbackasm1(SB), NOSPLIT, $0
+TEXT callbackasm1(SB), NOSPLIT|NOFRAME, $0
 	// remove return address from stack, we are not returning to callbackasm, but to its caller.
 	MOVQ 0(SP), AX
 	ADDQ $8, SP
 
 	MOVQ 0(SP), R10 // get the return SP so that we can align register args with stack args
 
-	// make space for first six arguments below the frame
-	ADJSP $6*8, SP
-	MOVQ  DI, 8(SP)
-	MOVQ  SI, 16(SP)
-	MOVQ  DX, 24(SP)
-	MOVQ  CX, 32(SP)
-	MOVQ  R8, 40(SP)
-	MOVQ  R9, 48(SP)
-	LEAQ  8(SP), R8  // R8 = address of args vector
+	// make space for first six int and 8 float arguments below the frame
+	ADJSP $14*8, SP
+	MOVSD X0, (1*8)(SP)
+	MOVSD X1, (2*8)(SP)
+	MOVSD X2, (3*8)(SP)
+	MOVSD X3, (4*8)(SP)
+	MOVSD X4, (5*8)(SP)
+	MOVSD X5, (6*8)(SP)
+	MOVSD X6, (7*8)(SP)
+	MOVSD X7, (8*8)(SP)
+	MOVQ  DI, (9*8)(SP)
+	MOVQ  SI, (10*8)(SP)
+	MOVQ  DX, (11*8)(SP)
+	MOVQ  CX, (12*8)(SP)
+	MOVQ  R8, (13*8)(SP)
+	MOVQ  R9, (14*8)(SP)
+	LEAQ  8(SP), R8      // R8 = address of args vector
 
 	MOVQ R10, 0(SP) // push the stack pointer below registers
 
@@ -128,7 +136,7 @@ TEXT callbackasm1(SB), NOSPLIT, $0
 
 	MOVQ 0(SP), R10 // get the SP back
 
-	ADJSP $-6*8, SP // remove arguments
+	ADJSP $-14*8, SP // remove arguments
 
 	MOVQ R10, 0(SP)
 
diff --git a/vendor/github.com/ebitengine/purego/sys_arm64.s b/vendor/github.com/ebitengine/purego/sys_arm64.s
index e673ece..942fd56 100644
--- a/vendor/github.com/ebitengine/purego/sys_arm64.s
+++ b/vendor/github.com/ebitengine/purego/sys_arm64.s
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: Apache-2.0
 // SPDX-FileCopyrightText: 2022 The Ebitengine Authors
 
-//go:build darwin || (!cgo && linux)
+//go:build darwin || (!cgo && linux) || windows
 
 #include "textflag.h"
 #include "go_asm.h"
@@ -62,50 +62,3 @@ TEXT syscall9X(SB), NOSPLIT, $0
 	MOVD  R0, syscall9Args_r1(R2) // save r1
 	FMOVD F0, syscall9Args_r2(R2) // save r2
 	RET
-
-TEXT callbackasm1(SB), NOSPLIT|NOFRAME, $0
-	NO_LOCAL_POINTERS
-
-	// On entry, the trampoline in zcallback_darwin_arm64.s left
-	// the callback index in R12 (which is volatile in the C ABI).
-
-	// Save callback register arguments R0-R7.
-	// We do this at the top of the frame so they're contiguous with stack arguments.
-	SUB $(8*8), RSP, R14
-	STP  (R0, R1), (0*8)(R14)
-	STP  (R2, R3), (2*8)(R14)
-	STP  (R4, R5), (4*8)(R14)
-	STP  (R6, R7), (6*8)(R14)
-
-	// Adjust SP by frame size.
-	// crosscall2 clobbers FP in the frame record so only save/restore SP.
-	SUB $(28*8), RSP
-	MOVD R30, (RSP)
-
-	// Create a struct callbackArgs on our stack.
-	ADD $(callbackArgs__size + 3*8), RSP, R13
-	MOVD R12, callbackArgs_index(R13)               // callback index
-	MOVD R14, R0
-	MOVD R0, callbackArgs_args(R13)                 // address of args vector
-	MOVD $0, R0
-	MOVD R0, callbackArgs_result(R13)               // result
-
-	// Move parameters into registers
-	// Get the ABIInternal function pointer
-	// without <ABIInternal> by using a closure.
-	MOVD ·callbackWrap_call(SB), R0
-	MOVD (R0), R0                   // fn unsafe.Pointer
-	MOVD R13, R1                    // frame (&callbackArgs{...})
-	MOVD $0, R3                     // ctxt uintptr
-
-	BL crosscall2(SB)
-
-	// Get callback result.
-	ADD $(callbackArgs__size + 3*8), RSP, R13
-	MOVD callbackArgs_result(R13), R0
-
-	// Restore SP
-	MOVD (RSP), R30
-	ADD $(28*8), RSP
-
-	RET
diff --git a/vendor/github.com/ebitengine/purego/sys_unix_arm64.s b/vendor/github.com/ebitengine/purego/sys_unix_arm64.s
new file mode 100644
index 0000000..d4281f7
--- /dev/null
+++ b/vendor/github.com/ebitengine/purego/sys_unix_arm64.s
@@ -0,0 +1,64 @@
+// SPDX-License-Identifier: Apache-2.0
+// SPDX-FileCopyrightText: 2023 The Ebitengine Authors
+
+//go:build darwin || (!cgo && linux)
+
+#include "textflag.h"
+#include "go_asm.h"
+#include "funcdata.h"
+#include "internal/abi/abi_arm64.h"
+
+TEXT callbackasm1(SB), NOSPLIT|NOFRAME, $0
+	NO_LOCAL_POINTERS
+
+	// On entry, the trampoline in zcallback_darwin_arm64.s left
+	// the callback index in R12 (which is volatile in the C ABI).
+
+	// Save callback register arguments R0-R7 and F0-F7.
+	// We do this at the top of the frame so they're contiguous with stack arguments.
+	SUB   $(16*8), RSP, R14
+	FMOVD F0, (0*8)(R14)
+	FMOVD F1, (1*8)(R14)
+	FMOVD F2, (2*8)(R14)
+	FMOVD F3, (3*8)(R14)
+	FMOVD F4, (4*8)(R14)
+	FMOVD F5, (5*8)(R14)
+	FMOVD F6, (6*8)(R14)
+	FMOVD F7, (7*8)(R14)
+	STP   (R0, R1), (8*8)(R14)
+	STP   (R2, R3), (10*8)(R14)
+	STP   (R4, R5), (12*8)(R14)
+	STP   (R6, R7), (14*8)(R14)
+
+	// Adjust SP by frame size.
+	// crosscall2 clobbers FP in the frame record so only save/restore SP.
+	SUB  $(28*8), RSP
+	MOVD R30, (RSP)
+
+	// Create a struct callbackArgs on our stack.
+	ADD  $(callbackArgs__size + 3*8), RSP, R13
+	MOVD R12, callbackArgs_index(R13)          // callback index
+	MOVD R14, R0
+	MOVD R0, callbackArgs_args(R13)            // address of args vector
+	MOVD $0, R0
+	MOVD R0, callbackArgs_result(R13)          // result
+
+	// Move parameters into registers
+	// Get the ABIInternal function pointer
+	// without <ABIInternal> by using a closure.
+	MOVD ·callbackWrap_call(SB), R0
+	MOVD (R0), R0                   // fn unsafe.Pointer
+	MOVD R13, R1                    // frame (&callbackArgs{...})
+	MOVD $0, R3                     // ctxt uintptr
+
+	BL crosscall2(SB)
+
+	// Get callback result.
+	ADD  $(callbackArgs__size + 3*8), RSP, R13
+	MOVD callbackArgs_result(R13), R0
+
+	// Restore SP
+	MOVD (RSP), R30
+	ADD  $(28*8), RSP
+
+	RET
diff --git a/vendor/github.com/ebitengine/purego/syscall.go b/vendor/github.com/ebitengine/purego/syscall.go
index 1b059c1..d14fdb0 100644
--- a/vendor/github.com/ebitengine/purego/syscall.go
+++ b/vendor/github.com/ebitengine/purego/syscall.go
@@ -5,7 +5,10 @@
 
 package purego
 
-const maxArgs = 9
+const (
+	maxArgs     = 9
+	numOfFloats = 8 // arm64 and amd64 both have 8 float registers
+)
 
 // SyscallN takes fn, a C function pointer and a list of arguments as uintptr.
 // There is an internal maximum number of arguments that SyscallN can take. It panics
diff --git a/vendor/github.com/ebitengine/purego/syscall_cgo_linux.go b/vendor/github.com/ebitengine/purego/syscall_cgo_linux.go
index 5e7eda4..59c9a00 100644
--- a/vendor/github.com/ebitengine/purego/syscall_cgo_linux.go
+++ b/vendor/github.com/ebitengine/purego/syscall_cgo_linux.go
@@ -16,7 +16,7 @@ var syscall9XABI0 = uintptr(cgo.Syscall9XABI0)
 // this is only here to make the assembly files happy :)
 type syscall9Args struct {
 	fn, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr
-	f1, f2, f3, f4, f5, f6, f7, f8         float64
+	f1, f2, f3, f4, f5, f6, f7, f8         uintptr
 	r1, r2, err                            uintptr
 }
 
diff --git a/vendor/github.com/ebitengine/purego/syscall_sysv.go b/vendor/github.com/ebitengine/purego/syscall_sysv.go
index 9542f40..9e7e507 100644
--- a/vendor/github.com/ebitengine/purego/syscall_sysv.go
+++ b/vendor/github.com/ebitengine/purego/syscall_sysv.go
@@ -6,7 +6,6 @@
 package purego
 
 import (
-	"math"
 	"reflect"
 	"runtime"
 	"sync"
@@ -17,17 +16,17 @@ var syscall9XABI0 uintptr
 
 type syscall9Args struct {
 	fn, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr
-	f1, f2, f3, f4, f5, f6, f7, f8         float64
+	f1, f2, f3, f4, f5, f6, f7, f8         uintptr
 	r1, r2, err                            uintptr
 }
 
 //go:nosplit
 func syscall_syscall9X(fn, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2, err uintptr) {
-	args := syscall9Args{fn, a1, a2, a3, a4, a5, a6, a7, a8, a9,
-		math.Float64frombits(uint64(a1)), math.Float64frombits(uint64(a2)), math.Float64frombits(uint64(a3)),
-		math.Float64frombits(uint64(a4)), math.Float64frombits(uint64(a5)), math.Float64frombits(uint64(a6)),
-		math.Float64frombits(uint64(a7)), math.Float64frombits(uint64(a8)),
-		r1, r2, err}
+	args := syscall9Args{
+		fn, a1, a2, a3, a4, a5, a6, a7, a8, a9,
+		a1, a2, a3, a4, a5, a6, a7, a8,
+		r1, r2, err,
+	}
 	runtime_cgocall(syscall9XABI0, unsafe.Pointer(&args))
 	return args.r1, args.r2, args.err
 }
@@ -61,15 +60,13 @@ type callbackArgs struct {
 	index uintptr
 	// args points to the argument block.
 	//
-	// For cdecl and stdcall, all arguments are on the stack.
-	//
-	// For fastcall, the trampoline spills register arguments to
-	// the reserved spill slots below the stack arguments,
-	// resulting in a layout equivalent to stdcall.
+	// The structure of the arguments goes
+	// float registers followed by the
+	// integer registers followed by the stack.
 	//
-	// For arm, the trampoline stores the register arguments just
-	// below the stack arguments, so again we can treat it as one
-	// big stack arguments frame.
+	// This variable is treated as a continuous
+	// block of memory containing all of the arguments
+	// for this callback.
 	args unsafe.Pointer
 	// Below are out-args from callbackWrap
 	result uintptr
@@ -78,14 +75,16 @@ type callbackArgs struct {
 func compileCallback(fn interface{}) uintptr {
 	val := reflect.ValueOf(fn)
 	if val.Kind() != reflect.Func {
-		panic("purego: type is not a function")
+		panic("purego: the type must be a function but was not")
+	}
+	if val.IsNil() {
+		panic("purego: function must not be nil")
 	}
 	ty := val.Type()
 	for i := 0; i < ty.NumIn(); i++ {
 		in := ty.In(i)
 		switch in.Kind() {
-		case reflect.Struct, reflect.Float32, reflect.Float64,
-			reflect.Interface, reflect.Func, reflect.Slice,
+		case reflect.Struct, reflect.Interface, reflect.Func, reflect.Slice,
 			reflect.Chan, reflect.Complex64, reflect.Complex128,
 			reflect.String, reflect.Map, reflect.Invalid:
 			panic("purego: unsupported argument type: " + in.Kind().String())
@@ -118,8 +117,11 @@ const ptrSize = unsafe.Sizeof((*int)(nil))
 
 const callbackMaxFrame = 64 * ptrSize
 
-// callbackasmABI0 is implemented in zcallback_GOOS_GOARCH.s
-var callbackasmABI0 uintptr
+// callbackasm is implemented in zcallback_GOOS_GOARCH.s
+//
+//go:linkname __callbackasm callbackasm
+var __callbackasm byte
+var callbackasmABI0 = uintptr(unsafe.Pointer(&__callbackasm))
 
 // callbackWrap_call allows the calling of the ABIInternal wrapper
 // which is required for runtime.cgocallback without the
@@ -136,9 +138,33 @@ func callbackWrap(a *callbackArgs) {
 	fnType := fn.Type()
 	args := make([]reflect.Value, fnType.NumIn())
 	frame := (*[callbackMaxFrame]uintptr)(a.args)
+	var floatsN int // floatsN represents the number of float arguments processed
+	var intsN int   // intsN represents the number of integer arguments processed
+	// stack points to the index into frame of the current stack element.
+	// The stack begins after the float and integer registers.
+	stack := numOfIntegerRegisters() + numOfFloats
 	for i := range args {
-		//TODO: support float32 and float64
-		args[i] = reflect.NewAt(fnType.In(i), unsafe.Pointer(&frame[i])).Elem()
+		var pos int
+		switch fnType.In(i).Kind() {
+		case reflect.Float32, reflect.Float64:
+			if floatsN >= numOfFloats {
+				pos = stack
+				stack++
+			} else {
+				pos = floatsN
+			}
+			floatsN++
+		default:
+			if intsN >= numOfIntegerRegisters() {
+				pos = stack
+				stack++
+			} else {
+				// the integers begin after the floats in frame
+				pos = intsN + numOfFloats
+			}
+			intsN++
+		}
+		args[i] = reflect.NewAt(fnType.In(i), unsafe.Pointer(&frame[pos])).Elem()
 	}
 	ret := fn.Call(args)
 	if len(ret) > 0 {
diff --git a/vendor/github.com/ebitengine/purego/syscall_windows.go b/vendor/github.com/ebitengine/purego/syscall_windows.go
index 4ebb8a9..a4db9f1 100644
--- a/vendor/github.com/ebitengine/purego/syscall_windows.go
+++ b/vendor/github.com/ebitengine/purego/syscall_windows.go
@@ -5,8 +5,19 @@ package purego
 
 import (
 	"syscall"
+	_ "unsafe" // only for go:linkname
+
+	"golang.org/x/sys/windows"
 )
 
+var syscall9XABI0 uintptr
+
+type syscall9Args struct {
+	fn, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr
+	f1, f2, f3, f4, f5, f6, f7, f8         uintptr
+	r1, r2, err                            uintptr
+}
+
 func syscall_syscall9X(fn, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2, err uintptr) {
 	r1, r2, errno := syscall.Syscall9(fn, 9, a1, a2, a3, a4, a5, a6, a7, a8, a9)
 	return r1, r2, uintptr(errno)
@@ -22,3 +33,13 @@ func syscall_syscall9X(fn, a1, a2, a3, a4, a5, a6, a7, a8, a9 uintptr) (r1, r2,
 func NewCallback(fn interface{}) uintptr {
 	return syscall.NewCallback(fn)
 }
+
+//go:linkname openLibrary openLibrary
+func openLibrary(name string) (uintptr, error) {
+	handle, err := windows.LoadLibrary(name)
+	return uintptr(handle), err
+}
+
+func loadSymbol(handle uintptr, name string) (uintptr, error) {
+	return windows.GetProcAddress(windows.Handle(handle), name)
+}
diff --git a/vendor/github.com/ebitengine/purego/zcallback_amd64.s b/vendor/github.com/ebitengine/purego/zcallback_amd64.s
index 0624563..d657775 100644
--- a/vendor/github.com/ebitengine/purego/zcallback_amd64.s
+++ b/vendor/github.com/ebitengine/purego/zcallback_amd64.s
@@ -11,9 +11,7 @@
 // which Go callback function is executed later on.
 #include "textflag.h"
 
-GLOBL ·callbackasmABI0(SB), NOPTR|RODATA, $8
-DATA ·callbackasmABI0(SB)/8, $callbackasm(SB)
-TEXT callbackasm(SB), 7, $0
+TEXT callbackasm(SB), NOSPLIT|NOFRAME, $0
 	CALL callbackasm1(SB)
 	CALL callbackasm1(SB)
 	CALL callbackasm1(SB)
diff --git a/vendor/github.com/ebitengine/purego/zcallback_arm64.s b/vendor/github.com/ebitengine/purego/zcallback_arm64.s
index 25e0bf7..87f4a54 100644
--- a/vendor/github.com/ebitengine/purego/zcallback_arm64.s
+++ b/vendor/github.com/ebitengine/purego/zcallback_arm64.s
@@ -11,8 +11,6 @@
 // It then calls the Go implementation for that callback.
 #include "textflag.h"
 
-GLOBL ·callbackasmABI0(SB), NOPTR|RODATA, $8
-DATA ·callbackasmABI0(SB)/8, $callbackasm(SB)
 TEXT callbackasm(SB), NOSPLIT|NOFRAME, $0
 	MOVD $0, R12
 	B    callbackasm1(SB)
diff --git a/vendor/github.com/muesli/termenv/color.go b/vendor/github.com/muesli/termenv/color.go
index 0d11f43..1a216e9 100644
--- a/vendor/github.com/muesli/termenv/color.go
+++ b/vendor/github.com/muesli/termenv/color.go
@@ -68,7 +68,7 @@ func ConvertToRGB(c Color) colorful.Color {
 }
 
 // Sequence returns the ANSI Sequence for the color.
-func (c NoColor) Sequence(bg bool) string {
+func (c NoColor) Sequence(_ bool) string {
 	return ""
 }
 
diff --git a/vendor/github.com/muesli/termenv/termenv_unix.go b/vendor/github.com/muesli/termenv/termenv_unix.go
index 11746d2..24d519a 100644
--- a/vendor/github.com/muesli/termenv/termenv_unix.go
+++ b/vendor/github.com/muesli/termenv/termenv_unix.go
@@ -25,6 +25,10 @@ func (o *Output) ColorProfile() Profile {
 		return Ascii
 	}
 
+	if o.environ.Getenv("GOOGLE_CLOUD_SHELL") == "true" {
+		return TrueColor
+	}
+
 	term := o.environ.Getenv("TERM")
 	colorTerm := o.environ.Getenv("COLORTERM")
 
@@ -46,7 +50,7 @@ func (o *Output) ColorProfile() Profile {
 	}
 
 	switch term {
-	case "xterm-kitty":
+	case "xterm-kitty", "wezterm":
 		return TrueColor
 	case "linux":
 		return ANSI
@@ -284,6 +288,6 @@ func (o Output) termStatusReport(sequence int) (string, error) {
 // Windows for w and returns a function that restores w to its previous state.
 // On non-Windows platforms, or if w does not refer to a terminal, then it
 // returns a non-nil no-op function and no error.
-func EnableVirtualTerminalProcessing(w io.Writer) (func() error, error) {
+func EnableVirtualTerminalProcessing(_ io.Writer) (func() error, error) {
 	return func() error { return nil }, nil
 }
diff --git a/vendor/modules.txt b/vendor/modules.txt
index 54b4c89..b69fb19 100644
--- a/vendor/modules.txt
+++ b/vendor/modules.txt
@@ -1,3 +1,7 @@
+# github.com/anhoder/foxful-cli v0.0.0-20230626142934-066334e0835b => ../foxful-cli
+## explicit; go 1.20
+github.com/anhoder/foxful-cli/model
+github.com/anhoder/foxful-cli/util
 # github.com/atotto/clipboard v0.1.4
 ## explicit
 github.com/atotto/clipboard
@@ -46,7 +50,7 @@ github.com/cocoonlife/goflac
 # github.com/containerd/console v1.0.4-0.20230313162750-1ae8d489ac81
 ## explicit; go 1.13
 github.com/containerd/console
-# github.com/ebitengine/purego v0.3.2
+# github.com/ebitengine/purego v0.4.0
 ## explicit; go 1.18
 github.com/ebitengine/purego
 github.com/ebitengine/purego/internal/abi
@@ -218,7 +222,7 @@ github.com/muesli/reflow/ansi
 github.com/muesli/reflow/truncate
 github.com/muesli/reflow/wordwrap
 github.com/muesli/reflow/wrap
-# github.com/muesli/termenv v0.15.1
+# github.com/muesli/termenv v0.15.2
 ## explicit; go 1.17
 github.com/muesli/termenv
 # github.com/panjf2000/ants/v2 v2.8.0
@@ -309,4 +313,5 @@ golang.org/x/text/runes
 golang.org/x/text/transform
 golang.org/x/text/unicode/norm
 golang.org/x/text/width
+# github.com/anhoder/foxful-cli => ../foxful-cli
 # github.com/shkh/lastfm-go => github.com/go-musicfox/lastfm-go v0.0.2
